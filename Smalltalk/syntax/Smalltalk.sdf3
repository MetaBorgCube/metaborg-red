module Smalltalk

imports
  
	Base

context-free start-symbols
  
	Start

context-free syntax
  
	Start.MethodDeclaration = MethodDeclaration
	Start.ExecutableCode = ExecutableCodeRest
//	Start.Start = Expression
	Start.Empty = <>
	
	Reference.Reference = Identifier
	
	ConstantReference.Null = <nil>
	ConstantReference.False = <false>
	ConstantReference.True = <true>
	
	PsuedoVariableReference.Self = <self>
	PsuedoVariableReference.Super = <super>
	PsuedoVariableReference.This = <thisContext>
	
	BindableIdentifier.BindableIdentifier = Identifier
	BindableIdentifier = ConstantReference {reject}
	BindableIdentifier = PsuedoVariableReference {reject}
	
	UnaryMessageSelector.UnaryMessageSelector = Identifier
	Keyword.Keyword = <<Identifier> :>
	KeywordMessageSelector.KeywordMessageSelector = Keyword+
	BinaryMessageSelector.BinaryMessageSelector = <<BinarySelectorChar> <BinarySelectorChar?>>
	
	SymbolInArrayLiteral.UnaryMessageSelector = UnaryMessageSelector
	SymbolInArrayLiteral.ConstantReference = ConstantReference {reject}
	SymbolInArrayLiteral.KeywordMessageSelector = KeywordMessageSelector
	SymbolInArrayLiteral.BinaryMessageSelector = BinaryMessageSelector
	
	SymbolLiteral.SymbolInArrayLiteral = <# <SymbolInArrayLiteral>>
	SymbolLiteral.ConstantReference = <# <ConstantReference>>
	SymbolLiteral.StringLiteral = <# <StringLiteral>>
	ArrayLiteral.ObjectArrayLiteral = ObjectArrayLiteral
	ArrayLiteral.ByteArrayLiteral = ByteArrayLiteral
	ObjectArrayLiteral.ObjectArrayLiteral = <# <NestedObjectArrayLiteral>>
	NestedObjectArrayLiteral.NestedObjectArrayLiteral = <( <LiteralArrayElement*> )>
	LiteralArrayElement.Literal = Literal
	LiteralArrayElement.BlockLiteral = BlockLiteral {reject}
	LiteralArrayElement.NestedObjectArrayLiteral = NestedObjectArrayLiteral
	LiteralArrayElement.SymbolInArrayLiteral = SymbolInArrayLiteral
	LiteralArrayElement.ConstantReference = ConstantReference
	ByteArrayLiteral.ByteArrayLiteral = <#[ <{UnsignedIntegerLiteral ""}*> ]>
	
	FormalBlockArgumentDeclaration.FormalBlockArgumentDeclaration = BindableIdentifier
	FormalBlockArgumentDeclarationList.FormalBlockArgumentDeclarationList = FormalBlockArgumentDeclaration+
	FormalBlockArgumentDeclarationListWithSep = <<FormalBlockArgumentDeclarationList> |>
	BlockLiteral.BlockLiteral = <[ <FormalBlockArgumentDeclarationListWithSep?> <ExecutableCode> ]>
	
	Literal.ConstantReference = ConstantReference
	Literal.IntegerLiteral  = IntegerLiteral 
	Literal.ScaledDecimalLiteral = ScaledDecimalLiteral 
	Literal.FloatingPointLiteral = FloatingPointLiteral 
	Literal.CharacterLiteral = CharacterLiteral 
	Literal.StringLiteral = StringLiteral 
	Literal.SymbolLiteral = SymbolLiteral 
	Literal.ArrayLiteral = ArrayLiteral 
	Literal.BlockLiteral = BlockLiteral
	
	NestedExpression.NestedExpression = <( <Statement> )> 
	
	Operand.Literal = Literal
	Operand.Reference = Reference
	Operand.NestedExpression = NestedExpression
	
	UnaryMessage.UnaryMessage = UnaryMessageSelector
	UnaryMessageChain.UnaryMessageChain = UnaryMessage*
	
	BinaryMessageOperand.BinaryMessageOperand = <<Operand> <UnaryMessageChain>>
	BinaryMessage.BinaryMessage = <<BinaryMessageSelector> <BinaryMessageOperand>>
	BinaryMessageChain.BinaryMessageChain = BinaryMessage*
	
	KeywordMessageArgument.KeywordMessageArgument = <<BinaryMessageOperand> <BinaryMessageChain>>
	KeywordMessageSegment.KeywordMessageSegment = <<Keyword> <KeywordMessageArgument>>
	KeywordMessage.KeywordMessage = <<KeywordMessageSegment> <KeywordMessageSegment*>>
	
	MessageChain.KeywordMessage = KeywordMessage
	MessageChain.BinaryMessage = <<BinaryMessage> <BinaryMessageChain> <KeywordMessage?>>
	MessageChain.UnaryMessage = <<UnaryMessage> <UnaryMessageChain> <BinaryMessageChain> <KeywordMessage?>>
	
	CascadedMessage.CascadedMessage = <; <MessageChain>>
	
	Expression.SingletonExpression = Operand
	Expression.Expression = <<Operand> <MessageChain> <CascadedMessage*>>
	
	AssignmentOperation.AssignmentOperation = <<BindableIdentifier> :=>
	Statement.Statement = <<AssignmentOperation*> <Expression>>
	MethodReturnOperator.MethodReturnOperator = <^>
	FinalStatement.FinalStatement = <<MethodReturnOperator?> <Statement>>
	
	LocalVariableDeclarationList.LocalVariableDeclarationList = <| <BindableIdentifier*> |>
	ExecutableCode.ExecutableCode = <<LocalVariableDeclarationList?> <ExecutableCodeRest?>>
	ExecutableCodeRest.ExecutableCodeRest = <<DottedStatement*> <FinalStatement> <Dot?>>
	DottedStatement.DottedStatement = <<Statement> .>
	Dot.Dot = <.>
	
	UnaryMethodHeader.UnaryMethodHeader = UnaryMessageSelector
	BinaryMethodHeader.BinaryMethodHeader = <<BinaryMessageSelector> <BindableIdentifier>>
	KeywordMethodHeaderSegment.KeywordMethodHeaderSegment = <<Keyword> <BindableIdentifier>>
	KeywordMethodHeader.KeywordMethodHeader = KeywordMethodHeaderSegment+
	MethodHeader.UnaryMethodHeader = UnaryMethodHeader 
	MethodHeader.BinaryMethodHeader = BinaryMethodHeader 
	MethodHeader.KeywordMethodHeader = KeywordMethodHeader 
	MethodDeclaration.MethodDeclaration = <<MethodHeader> <ExecutableCode>>
	
context-free priorities
	


