module ds-signatures/Smalltalk-sig

imports ds-signatures/Base-sig

signature
    sorts
      Prog
      Start
      Reference
      ConstantReference
      PsuedoVariableReference
      BindableIdentifier
      UnaryMessageSelector
      Keyword
      KeywordMessageSelector
      BinaryMessageSelector
      SymbolInArrayLiteral
      SymbolLiteral
      ArrayLiteral
      ObjectArrayLiteral
      NestedObjectArrayLiteral
      LiteralArrayElement
      ByteArrayLiteral
      FormalBlockArgumentDeclaration
      FormalBlockArgumentDeclarationList
      FormalBlockArgumentDeclarationListWithSep
      BlockLiteral
      Literal
      NestedExpression
      Operand
      UnaryMessage
      UnaryMessageChain
      BinaryMessageOperand
      BinaryMessage
      BinaryMessageChain
      KeywordMessageArgument
      KeywordMessageSegment
      KeywordMessage
      MessageChain
      CascadedMessage
      Expression
      ExpressionRest
      AssignmentOperation
      Statement
      MethodReturnOperator
      FinalStatement
      LocalVariableDeclarationList
      ExecutableCode
      ExecutableCodeRest
      DottedStatement
      Dot
      UnaryMethodHeader
      BinaryMethodHeader
      KeywordMethodHeaderSegment
      KeywordMethodHeader
      MethodHeader
      MethodDeclaration
    constructors
      Program : Start -> Prog 
      Temp : Expression -> Start 
      MethodDeclaration : MethodDeclaration -> Start 
      ExecutableCode : ExecutableCode -> Start 
      ReferenceID : Identifier -> Reference 
      Null : ConstantReference 
      False : ConstantReference 
      True : ConstantReference 
      Self : PsuedoVariableReference 
      Super : PsuedoVariableReference 
      This : PsuedoVariableReference 
      BindableIdentifier : Identifier -> BindableIdentifier 
      UnaryMessageSelector1 : Identifier -> UnaryMessageSelector 
      Keyword : Identifier -> Keyword 
      KeywordMessageSelector1 : List(Keyword) -> KeywordMessageSelector 
      UnarySelector : BinarySelectorChar -> BinaryMessageSelector 
      BinarySelector : BinarySelectorChar * BinarySelectorChar -> BinaryMessageSelector 
      UnaryMessageSelector2 : UnaryMessageSelector -> SymbolInArrayLiteral 
      KeywordMessageSelector2 : KeywordMessageSelector -> SymbolInArrayLiteral 
      BinaryMessageSelector2 : BinaryMessageSelector -> SymbolInArrayLiteral 
      SymbolInArrayLiteral1 : SymbolInArrayLiteral -> SymbolLiteral 
      ConstantReference2 : ConstantReference -> SymbolLiteral 
      StringLiteral1 : StringLiteral -> SymbolLiteral 
      ObjectArrayLiteral1 : ObjectArrayLiteral -> ArrayLiteral 
      ByteArrayLiteral1 : ByteArrayLiteral -> ArrayLiteral 
      ObjectArrayLiteral2 : NestedObjectArrayLiteral -> ObjectArrayLiteral 
      NestedObjectArrayLiteral1 : List(LiteralArrayElement) -> NestedObjectArrayLiteral 
      Literal1 : Literal -> LiteralArrayElement 
      NestedObjectArrayLiteral2 : NestedObjectArrayLiteral -> LiteralArrayElement 
      SymbolInArrayLiteral2 : SymbolInArrayLiteral -> LiteralArrayElement 
      ConstantReference3 : ConstantReference -> LiteralArrayElement 
      ByteArrayLiteral2 : List(UnsignedIntegerLiteral) -> ByteArrayLiteral 
      FormalBlockArgumentDeclaration : BindableIdentifier -> FormalBlockArgumentDeclaration 
      FormalBlockArgumentDeclarationList : List(FormalBlockArgumentDeclaration) -> FormalBlockArgumentDeclarationList 
      BlockLiteral1 : FormalBlockArgumentDeclarationListWithSep * ExecutableCode -> BlockLiteral 
      ConstantReference4 : ConstantReference -> Literal 
      IntegerLiteral : IntegerLiteral -> Literal 
      ScaledDecimalLiteral : ScaledDecimalLiteral -> Literal 
      FloatingPointLiteral : FloatingPointLiteral -> Literal 
      CharacterLiteral : CharacterLiteral -> Literal 
      StringLiteral2 : StringLiteral -> Literal 
      SymbolLiteral : SymbolLiteral -> Literal 
      ArrayLiteral : ArrayLiteral -> Literal 
      BlockLiteral2 : BlockLiteral -> Literal 
      NestedExpression1 : Statement -> NestedExpression 
      Literal2 : Literal -> Operand 
      Reference : Reference -> Operand 
      NestedExpression2 : NestedExpression -> Operand 
      UnaryMessage : UnaryMessageSelector -> UnaryMessage 
      UnaryMessageChain : List(UnaryMessage) -> UnaryMessageChain 
      BinaryMessageOperand : Operand * UnaryMessageChain -> BinaryMessageOperand 
      BinaryMessage1 : BinaryMessageSelector * BinaryMessageOperand -> BinaryMessage 
      BinaryMessageChain : List(BinaryMessage) -> BinaryMessageChain 
      KeywordMessageArgument : BinaryMessageOperand * BinaryMessageChain -> KeywordMessageArgument 
      KeywordMessageSegment : Keyword * KeywordMessageArgument -> KeywordMessageSegment 
      KeywordMessage : KeywordMessageSegment * List(KeywordMessageSegment) -> KeywordMessage 
      KeywordMessage : KeywordMessage -> MessageChain 
      BinaryMessage2 : BinaryMessage * BinaryMessageChain -> MessageChain 
      KeywordMessage : BinaryMessage * BinaryMessageChain * KeywordMessage -> MessageChain 
      UnaryMessage : UnaryMessage * UnaryMessageChain * BinaryMessageChain * KeywordMessage -> MessageChain 
      CascadedMessage : MessageChain -> CascadedMessage 
      Expression : Operand * ExpressionRest -> Expression 
      EREmpty : ExpressionRest 
      ExpressionRest : MessageChain * List(CascadedMessage) -> ExpressionRest 
      AssignmentOperation : BindableIdentifier -> AssignmentOperation 
      Statement : List(AssignmentOperation) * Expression -> Statement 
      MethodReturnOperator : MethodReturnOperator 
      FinalStatement : MethodReturnOperator * Statement -> FinalStatement 
      LocalVariableDeclarationList : List(BindableIdentifier) -> LocalVariableDeclarationList 
      ExecutableCode : LocalVariableDeclarationList * ExecutableCodeRest -> ExecutableCode 
      ExecutableCodeRest : List(DottedStatement) * FinalStatement * Dot -> ExecutableCodeRest 
      DottedStatement : Statement -> DottedStatement 
      Dot : Dot 
      UnaryMethodHeader1 : UnaryMessageSelector -> UnaryMethodHeader 
      BinaryMethodHeader : BinaryMessageSelector * BindableIdentifier -> BinaryMethodHeader 
      KeywordMethodHeaderSegment : Keyword * BindableIdentifier -> KeywordMethodHeaderSegment 
      KeywordMethodHeader1 : List(KeywordMethodHeaderSegment) -> KeywordMethodHeader 
      UnaryMethodHeader2 : UnaryMethodHeader -> MethodHeader 
      BinaryMethodHeader : BinaryMethodHeader -> MethodHeader 
      KeywordMethodHeader2 : KeywordMethodHeader -> MethodHeader 
      MethodDeclaration : MethodHeader * ExecutableCode -> MethodDeclaration 