module trans/runtime/store

imports
  trans/runtime/values
  
  trans/dynamics/Objects

signature
  constructors
  	RefV: Int -> V

  sort aliases
    Scope = Map(String, Map(String, V))
    Heap = Map(V, Object)

  components
    H : Heap
    S : Scope

  arrows
    read(V) --> Object
    allocate(Object) --> V
    write(V, Object) --> Object

	bindToGlobalMap(List(String), V) --> V
	bindToGlobal(String, V) --> V
	bindToLocalMap(List(String), V) --> V
	bindToLocal(String, V) --> V

    bindVarMap(List(String), V) --> V
    bindVar(String, V) --> V
    bindVarToObject(String, V) --> V
    bindVarToGlobal(String, V) --> V
    
    readVar(String) --> V
    readVarFromObject(String) --> V
    readVarFromGlobal(String) --> V
   
   native operators
   	errorV: String -> V

rules

  read(addr) :: S, H --> H[addr].

  allocate(o) :: S, H --> addr :: S, H H1
  where
    fresh => addrint;
    RefV(addrint) => addr;
    write(addr, o) --> _ :: S, H1.

  write(addr, o) :: S, H --> o :: S, H {addr |--> o, H}.
  
  bindToGlobalMap([], v) --> v.
  bindToGlobalMap([id | tail], v) :: S, H --> v :: S S2, H H2
  where
  	bindToGlobal(id, v) :: S, H --> _ :: S1, H1;
  	bindToGlobalMap(tail, v) :: S1, H1 --> E :: S2, H2.
  	
  bindToLocalMap([], v) --> v.
  bindToLocalMap([id | tail], v) :: S, H --> v :: S S2, H H2
  where
  	bindToLocal(id, v) :: S, H --> _ :: S1, H1;
  	bindToLocalMap(tail, v) :: S1, H1 --> E :: S2, H2.
  
  bindVarMap([], v) --> v.
  bindVarMap([id | tail], v) :: S, H --> v :: S S2, H H2
  where
  	bindVar(id, v) :: S, H --> _ :: S1, H1;
  	bindVarMap(tail, v) :: S1, H1 --> E :: S2, H2.

  readVar(id) :: S, H --> v
  where
  	case S["local"?] of {
  		true =>
  			S["local"] => localScope;
  			case localScope[id?] of {
  				true =>
  					localScope[id] => v
  				otherwise =>
  					readVarFromObject(id) --> v
  			}
  		otherwise =>
  			readVarFromObject(id) --> v
  	}
  	
  readVarFromObject(id) :: S, H --> v
  where
  	printV(StringV("accessing store 1")) => _;
  	case S["refs"?] of {
  		true =>
  			printV(StringV("accessing store 2")) => _;
  			S["refs"] => objectReferences;
  			case objectReferences["object"?] of {
  				true =>
  					printV(StringV("accessing store 3")) => _;
  					case objectReferences["object"] of {
				  		RefV(addr) =>
				  			printV(StringV("accessing store 4")) => _;
				  			read(RefV(addr)) --> obj;
				  			case obj of {
				  				Object(_, objAttributes, _) =>
				  					printV(StringV("accessing store 5")) => _;
				  					case objAttributes[id?] of {
				  						true =>
				  							objAttributes[id] => v
				  						otherwise =>
				  							readVarFromGlobal(id) --> v
				  					}
				  				otherwise =>
				  					errorV("variable not found to read: object not found") => v
				  			}
				  	}
  				otherwise =>
  					case objectReferences["class"?] of {
  						true =>
  							case objectReferences["class"] of {
						  		RefV(addr) =>
						  			read(RefV(addr)) --> class;
						  			case class of {
						  				Class(_, _, classAttributes, _, _) =>
						  					case classAttributes[id?] of {
						  						true =>
						  							classAttributes[id] => v
						  						otherwise =>
						  							readVarFromGlobal(id) --> v
						  					}
						  				otherwise =>
				  							errorV("variable not found to read: class not found") => v
						  			}
						  	}
  						otherwise =>
  							errorV("variable not found to read: object/class not found") => v
  					}
  			}
  		otherwise =>
  			readVarFromGlobal(id) --> v
  	}
  	
  readVarFromGlobal(id) :: S, H --> v
  where
    case S["global"?] of {
  		true =>
  			S["global"] => globalScope;
			case globalScope[id?] of {
				true =>
					globalScope[id] => v
				otherwise =>
					errorV("variable not found to read: local/object/class/global not found") => v
			}
  		otherwise =>
  			errorV("variable not found to read: global not found " ++ id) => v
  	}
  		
  bindToGlobal(id, value) :: S, H --> value :: S S1, H
  where
  	case S["global"?] of {
  		true =>
  			S["global"] => globalScope
  		otherwise =>
  			{} : Map(String, V) => globalScope
  	};
  	{id |--> value, globalScope} => globalScope;
  	{"global" |--> globalScope, S} => S1.
  	
  bindToLocal(id, value) :: S, H --> value :: S S1, H
  where
  	case S["local"?] of {
  		true =>
  			S["local"] => localScope
  		otherwise =>
  			{} : Map(String, V) => localScope
  	};
  	{id |--> value, localScope} => localScope;
  	{"local" |--> localScope, S} => S1.
  		
  		
  bindVar(id, value) :: S, H --> value :: S S1, H H1
  where
  	case S["local"?] of {
  		true =>
  			S["local"] => localScope;
  			case localScope[id?] of {
  				true =>
  					{id |--> value, localScope} => localScope;
  					{"local" |--> localScope, S} => S1;
  					H => H1
  				otherwise =>
  					bindVarToObject(id, value) --> _ :: S S1, H H1
  			}
  		otherwise =>
  			bindVarToObject(id, value) --> _ :: S S1, H H1
  	}
  	
  bindVarToObject(id, value) :: S, H --> value :: S S1, H H1
  where
  	case S["refs"?] of {
  		true =>
  			S["refs"] => objectReferences;
  			case objectReferences["object"?] of {
  				true =>
  					case objectReferences["object"] of {
				  		RefV(addr) =>
				  			read(RefV(addr)) --> obj;
				  			case obj of {
				  				Object(classRef, attributes, methods) =>
				  					case attributes[id?] of {
				  						true =>
				  							{id |--> value, attributes} => newAttributes;
				  							write(RefV(addr), Object(classRef, newAttributes, methods)) :: S, H --> _ :: S S1, H H1
				  						otherwise =>
				  							bindVarToGlobal(id, value) --> v :: S S1, H H1
				  					}
				  				otherwise =>
					  					errorV("variable not found to write: class not found") => v;
					  					S => S1;
					  					H => H1
				  			}
				  	}
  				otherwise =>
  					case objectReferences["class"?] of {
		  				true =>
		  					case objectReferences["class"] of {
						  		RefV(addr) =>
						  			read(RefV(addr)) --> class;
						  			case class of {
						  				Class(parentRef, obj, attributes, attributeNames, methods) =>
						  					case attributes[id?] of {
						  						true =>
						  							{id |--> value, attributes} => newAttributes;
						  							write(RefV(addr), Class(parentRef, obj, newAttributes, attributeNames, methods)) :: S, H --> _ :: S S1, H H1
						  						otherwise =>
						  							bindVarToGlobal(id, value) --> v :: S S1, H H1
						  					}
						  				otherwise =>
						  					errorV("variable not found to write: class not found") => v;
						  					S => S1;
						  					H => H1
						  			}
						  	}
		  				otherwise =>
		  					errorV("variable not found to write: object/class not found") => v;
		  					S => S1;
		  					H => H1
		  			}
  			}
  		otherwise =>
  			bindVarToGlobal(id, value) :: S, H --> _ :: S S1, H H1
  	}
  		
  	bindVarToGlobal(id, value) :: S, H --> value :: S S1, H
  	where
  		case S["global"?] of {
	  		true =>
	  			S["global"] => globalScope;
		  		case globalScope[id?] of {
		  			true =>
		  				{id |--> value, globalScope} => newScope;
		  				{"global" |--> newScope, S} => S1
		  			otherwise =>
		  				errorV("variable not found to write: local/object/class/global not found") => _;
		  				S => S1
		  		}
	  		otherwise =>
	  			errorV("variable not found to write: global not found " ++ id) => _;
		  		S => S1
	  	}
  		
  		