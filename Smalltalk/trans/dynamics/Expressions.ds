module trans/dynamics/Expressions

imports
src-gen/ds-signatures/Smalltalk-sig
src-gen/ds-signatures/Base-sig

trans/runtime/values
trans/runtime/store

signature

  constructors
  	NilV: V
    NumV: Int -> V
    BoolV: Bool -> V
    StringV: String -> V
  	BinaryMessageCall: String * V -> Message
    UnaryMessageCall: String -> Message
    KeywordValuePair: String * V ->	KeywordMessageElement
    KeywordMessageCall: List(String) * List(V) -> Message
    
  arrows
    Expression --> V
  	
  	Literal --> V
  	Reference --> V
  	Operand --> V
  	UnaryMessage --> Message
  	BinaryMessage --> Message
  	KeywordMessageSegment --> KeywordMessageElement
  	KeywordMessage --> List(Message)
  	MessageChain -->  List(Message)
  	UnaryMessageChain --> List(Message)
  	BinaryMessageOperand --> V
  	UnaryMessageSelector --> String
  	Keyword --> String
  	KeywordMessageArgument --> V
  	Statement --> V
  	ConstantReference --> V
  	ExecutableCodeRest --> V
  	V --> V
  	Message --> Message
  	List(BinaryMessage) --> List(Message)
  	List(UnaryMessage) --> List(Message)
  	KeywordMessageMap(List(KeywordMessageSegment), Message) --> Message
  	ExpI(V, List(Message)) --> V
//    DynamicDispatch: List(Message) -> V
  native operators
    parseI: String -> Int
    num-call-native: String * V * V -> V
    bool-call-native: String * V * V -> V
    num-call-native: String * V -> V
    bool-call-native: String * V -> V
    num-calls-native: List(String) * List(V) * V -> V
   	bool-calls-native: List(String) * List(V) * V -> V
   	printV: V -> V
  components
  	L : List(Message)

rules

	SingletonExpression(operand) --> operand.	
	
	Expression(operand, chain, cascaded) --> result
	where 
		ExpI(operand, chain) --> result.
		
	ExpI(operand, [headMessage | tailMessages]) --> v4
		where
		case headMessage of {
		UnaryMessageCall(messageName) =>
			case operand of {
			NumV(_) => 
				num-call-native(messageName, operand) => v3;
				ExpI(v3, tailMessages) --> v4
			BoolV(_) =>		
				bool-call-native(messageName, operand) => v3;
				ExpI(v3, tailMessages) --> v4
//			RefV(r1) =>
//				DynamicDispatch(r1, ["sad"]) => v4
			}	
		BinaryMessageCall(messageName, v2) =>
			case operand of {
			NumV(_) => 
				num-call-native(messageName, operand, v2) => v3;
				ExpI(v3, tailMessages) --> v4
			BoolV(_) =>		
				bool-call-native(messageName, operand, v2) => v3;
				ExpI(v3, tailMessages) --> v4
			}
		KeywordMessageCall(keywords, values) =>
			case operand of {
			NumV(_) => 
				num-calls-native(keywords, values, operand) => v3;
				ExpI(v3, tailMessages) --> v4
			BoolV(_) =>		
				bool-calls-native(keywords, values, operand) => v3;
				ExpI(v3, tailMessages) --> v4
			}
		}
			
	ExpI(e3, []) --> e3.
	
		
	Literal(e1) --> e1.
	ReferenceOperand(ref) --> ref.
	
	ReferenceID(id) --> readVar(id).
		
	IntegerLiteral(s) --> NumV(parseI(s)).
	ConstantReference(bool) --> bool
		where bool --> BoolV(b).
	
	True() --> BoolV(true).
	False() --> BoolV(false).
	
	NumV(a) --> NumV(a).
	BoolV(b) --> BoolV(b).
	
	BinaryMessage(selector, operand) --> BinaryMessageCall(selector, operand).
		
	BinaryMessageChain([bHead | bTail]) --> [b1 | BinaryMessageChain(bTail)]
		where 
		bHead --> b1.
		
	BinaryMessageChain([]) --> [].
	
	BinaryMessageOperand(operand, unarychain) --> ExpI(operand, unaryMessages)
		where
		unarychain --> unaryMessages. 
	
	BinaryMessageChainWithKeyword(binaryMessages, keywordMessage) --> binMessages ++ keyMessage
		where
			BinaryMessageChain(binaryMessages) --> binMessages;
			keywordMessage --> keyMessage.
		
	UnaryMessageChain([uHead | uTail]) --> [u1 | UnaryMessageChain(uTail)]
	where
		uHead --> u1.
		
	UnaryMessageChain([]) --> [].
	
	UnaryMessage(selector) --> UnaryMessageCall(selector).
	
	UnaryMessageSelector(identifier) --> identifier.
	
	UnaryBinaryMessageChain(unaryMessages, binaryMessages) --> uChain ++ bChain
	where
		UnaryMessageChain(unaryMessages) --> uChain;
	 	BinaryMessageChain(binaryMessages) --> bChain.
		
	
	UnaryMessageChainWithKeyword(unaryMessages, binaryMessages, keywordMessage) --> uList ++ kList
	where
		UnaryBinaryMessageChain(unaryMessages, binaryMessages) --> uList;
		keywordMessage --> kList.
	
	KeywordMessageChain(keywordMessage) --> keywordMessage.
	
	KeywordMessage(messageSegment) --> [KeywordMessageCall(values, keys)]
		where
			KeywordMessageMap(messageSegment, KeywordMessageCall([],[])) => KeywordMessageCall(values, keys).
			
	KeywordMessageMap([messageSegmentHead | messageSegmentTail], KeywordMessageCall(curKeys, curVals)) --> message
		where
		messageSegmentHead --> KeywordValuePair(key, value);
		KeywordMessageMap(messageSegmentTail, KeywordMessageCall([key | curKeys], [value | curVals])) => message.
		
	KeywordMessageMap([], KeywordMessageCall(keys, vals)) --> KeywordMessageCall(keys, vals).
	
	KeywordMessageSegment(keyword, keywordMessageArgument) --> KeywordValuePair(key, argumentValue)
		where
		keyword --> key;
		keywordMessageArgument --> argumentValue.
		
	KeywordMessageArgument(binaryMessageOperand, binaryMessages) --> ExpI(binaryMessageOperand, BinaryMessageChain(binaryMessages)).
		
	Keyword(key) --> key.	

    