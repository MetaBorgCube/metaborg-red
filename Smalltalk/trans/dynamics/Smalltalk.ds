module trans/dynamics/Smalltalk

imports 
src-gen/ds-signatures/Smalltalk-sig
src-gen/ds-signatures/Base-sig
trans/runtime/values
trans/runtime/store
trans/environment/environment

signature
  constructors
    NumV: Int -> V
    OP: String -> O    
    OP: String * String -> O    
    ExpRest: O * V -> E
  arrows
    Prog -init-> V
    ExecutableCodeRest --> V
    FinalStatement --> V
    
    StatementExecutor(List(Statement)) --> Env
    DotRemover(List(DottedStatement)) --> List(Statement)
    Statement --> V
    AssignmentOperation --> E
    
  	Expression --> V
  	
  	Literal --> V
  	Operand --> V
  	BinaryMessage --> E
  	MessageChain --> E
  	ExpressionRest --> E
  	BinaryMessageOperand --> V
  	BinaryMessageSelector --> O
  	ExecutableCodeRest --> V
  native operators
    parseI: String -> Int
    binOpI: Int * Int * String -> Int
  components
    H : Heap
    E : Env
    
rules
	
	Program(ExecutableCode(rest)) -init-> v
		where
			E {} |- rest :: H {} --> v :: H _.

	ExecutableCodeRest(statements, finalstmt) --> v
		where
			StatementExecutor(DotRemover(statements)) --> E1;
			E1 |- finalstmt --> v.



	DotRemover([]) --> [].
	DotRemover([DottedStatement(head) | tail]) --> [head | rest]
	where
		DotRemover(tail) --> rest.
			
	E |- StatementExecutor([]) --> E.
	StatementExecutor([Statement(assignments, expression) | tail]) --> E2
	where
		expression --> v;
		bindVar(assignments, v) --> E1;
		E1 |- StatementExecutor(tail) --> E2.
			
	    
	FinalStatement(Statement(_, expression)) --> v
		where
			expression --> v.



	Expression(e1, EREmpty()) --> NumV(i1)
		where e1 --> NumV(i1).

	Expression(e1, e2) --> NumV(binOpI(i1, i2, op))
	where 
		e1 --> NumV(i1);
		e2 --> ExpRest(OP(op), NumV(i2)).
		
	Literal(e1) --> NumV(i1)
		where e1 --> NumV(i1).
		
	IntegerLiteral(s) --> NumV(parseI(s)).
	
	BinaryMessage1(selector, operand) --> ExpRest(selector, operand).
		
	UnarySelector(op) --> OP(op).
	BinarySelector(op1, op2) --> OP(op1, op2).
	
	BinaryMessage2(message, chain) --> message.
	ExpressionRest(message, cascaded) --> message.
	EREmpty() --> ExpRest(OP("+"), NumV(0)).
	
	BinaryMessageOperand(literal, chain) --> literal. 
    