definition

module completion/Common-completion-insertions
imports Common

exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    [A-Za-z0-9\_]                  -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF            

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                     
                                         -> "-"             {recover, cons("INSERTION")}
    "\""                                 -> INSERTOPENQUOTE {recover}
    INSERTOPENQUOTE StringChar* "\n"     -> STRING          {cons("INSERTEND")}
    INSERTOPENQUOTE StringChar* WATEREOF -> STRING          {cons("INSERTEND")}
    "/*"                                 -> INSERTSTART     {recover}
    INSERTSTART InsideComment* WATEREOF  -> LAYOUT          {cons("INSERTEND")}
                                         -> "$Prog"         {recover, cons("INSERTION")}
                                         -> "$INT"          {recover, cons("INSERTION")}
                                         -> "box"           {recover, cons("INSERTION")}
                                         -> "unbox"         {recover, cons("INSERTION")}
                                         -> "setbox"        {recover, cons("INSERTION")}
                                         -> "print"         {recover, cons("INSERTION")}
                                         -> "$ID"           {recover, cons("INSERTION")}
                                         -> "}"             {recover, cons("INSERTION")}
                                         -> ";"             {recover, cons("INSERTION")}
                                         -> ")"             {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  lexical syntax
     -> COMPLETION-INSERTION 

module Common
exports
  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]*    -> ID            
    "-"? [0-9]+              -> INT           
    "\"" StringChar* "\""    -> STRING        
    ~[\"\n]                  -> StringChar    
    "\\\""                   -> StringChar    
    BackSlashChar            -> StringChar    
    "\\"                     -> BackSlashChar 
    [\ \t\n\r]               -> LAYOUT        
    [\*]                     -> CommentChar   
    "/*" InsideComment* "*/" -> LAYOUT        
    ~[\*]                    -> InsideComment 
    CommentChar              -> InsideComment 
    "//" ~[\n\r]* NewLineEOF -> LAYOUT        
    [\n\r]                   -> NewLineEOF    
    EOF                      -> NewLineEOF    
                             -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

module Smalltalk
imports Common

exports
  context-free start-symbols

  context-free start-symbols
    Prog

  context-free syntax
    Exp         -> Prog {cons("Program")}
    INT         -> Exp  {cons("Lit")}
    Exp "+" Exp -> Exp  {cons("Plus"), left}
    Exp "-" Exp -> Exp  {cons("Minus"), left}
    Exp "*" Exp -> Exp  {cons("Times"), left}
    "(" Exp ")" -> Exp  {bracket}

  lexical syntax
    

  context-free syntax
    "$Prog" -> Prog {cons("Prog-Plhdr"), placeholder}
    "$INT"  -> INT  {cons("INT-Plhdr"), placeholder}
    "$Exp"  -> Exp  {cons("Exp-Plhdr"), placeholder}

  context-free syntax
    "let" ID "=" Exp "in" Exp -> Exp {cons("Let"), non-assoc}
    ID                        -> Exp {cons("Var")}

  lexical syntax
    

  context-free syntax
    "$Exp" -> Exp {cons("Exp-Plhdr"), placeholder}
    "$ID"  -> ID  {cons("ID-Plhdr"), placeholder}

  context-free syntax
    "box" "(" Exp ")"            -> Exp {cons("Box")}
    "unbox" "(" Exp ")"          -> Exp {cons("Unbox")}
    "setbox" "(" Exp "," Exp ")" -> Exp {cons("Setbox")}
    "print" "(" Exp ")"          -> Exp {cons("Print")}
    "box"                        -> ID  {reject}
    "unbox"                      -> ID  {reject}
    "setbox"                     -> ID  {reject}
    "print"                      -> ID  {reject}

  lexical syntax
    

  context-free syntax
    "$Exp" -> Exp {cons("Exp-Plhdr"), placeholder}
    "$ID"  -> ID  {cons("ID-Plhdr"), placeholder}

  context-free syntax
    ID "->" Exp     -> Exp {cons("Fun")}
    Exp "(" Exp ")" -> Exp {cons("App"), left}

  lexical syntax
    

  context-free syntax
    "$ID"  -> ID  {cons("ID-Plhdr"), placeholder}
    "$Exp" -> Exp {cons("Exp-Plhdr"), placeholder}

  context-free syntax
    "ifz" Exp "then" Exp "else" Exp -> Exp {cons("Ifz")}

  lexical syntax
    

  context-free syntax
    "$Exp" -> Exp {cons("Exp-Plhdr"), placeholder}

  context-free syntax
    "{" {Exp ";"}* "}" -> Exp {cons("Block")}

  lexical syntax
    

  context-free syntax
    "$Exp" -> Exp {cons("Exp-Plhdr"), placeholder}

  context-free syntax
    "throw" "(" Exp ")"                   -> Exp {cons("Throw")}
    "try" "(" Exp ")" "catch" "(" Exp ")" -> Exp {cons("TryCatch")}

  lexical syntax
    

  context-free syntax
    "$Exp" -> Exp {cons("Exp-Plhdr"), placeholder}

  context-free priorities
    "{" {Exp ";"}* "}" -> Exp >
    {left:
      Exp "(" Exp ")" -> Exp
    } >
    {left:
      Exp "*" Exp -> Exp
    } >
    {left:
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    } >
    ID "->" Exp -> Exp >
    {non-assoc:
      "let" ID "=" Exp "in" Exp -> Exp
    }

module completion/Smalltalk-completion-insertions
imports Smalltalk

imports completion/Common-completion-insertions

exports
  context-free start-symbols
    Prog INT Exp

  context-free syntax
    COMPLETION-INSERTION -> Prog {cons("Prog-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> INT  {cons("INT-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Exp  {cons("Exp-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "+" {literal-completion}
    COMPLETION-INSERTION -> "-" {literal-completion}
    COMPLETION-INSERTION -> "*" {literal-completion}
    COMPLETION-INSERTION -> "(" {literal-completion}
    COMPLETION-INSERTION -> ")" {literal-completion}

  context-free start-symbols
    Exp ID

  context-free syntax
    COMPLETION-INSERTION -> Exp {cons("Exp-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ID  {cons("ID-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "let" {literal-completion}
    COMPLETION-INSERTION -> "="   {literal-completion}
    COMPLETION-INSERTION -> "in"  {literal-completion}

  context-free start-symbols
    Exp ID

  context-free syntax
    COMPLETION-INSERTION -> Exp {cons("Exp-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ID  {cons("ID-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> ","      {literal-completion}
    COMPLETION-INSERTION -> "("      {literal-completion}
    COMPLETION-INSERTION -> ")"      {literal-completion}
    COMPLETION-INSERTION -> "box"    {literal-completion}
    COMPLETION-INSERTION -> "unbox"  {literal-completion}
    COMPLETION-INSERTION -> "setbox" {literal-completion}
    COMPLETION-INSERTION -> "print"  {literal-completion}

  context-free start-symbols
    ID Exp

  context-free syntax
    COMPLETION-INSERTION -> ID  {cons("ID-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Exp {cons("Exp-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "->" {literal-completion}
    COMPLETION-INSERTION -> "("  {literal-completion}
    COMPLETION-INSERTION -> ")"  {literal-completion}

  context-free start-symbols
    Exp

  context-free syntax
    COMPLETION-INSERTION -> Exp {cons("Exp-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "ifz"  {literal-completion}
    COMPLETION-INSERTION -> "then" {literal-completion}
    COMPLETION-INSERTION -> "else" {literal-completion}

  context-free start-symbols
    Exp

  context-free syntax
    COMPLETION-INSERTION -> Exp {cons("Exp-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "{" {literal-completion}
    COMPLETION-INSERTION -> ";" {literal-completion}
    COMPLETION-INSERTION -> "}" {literal-completion}

  context-free start-symbols
    Exp

  context-free syntax
    COMPLETION-INSERTION -> Exp {cons("Exp-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "throw" {literal-completion}
    COMPLETION-INSERTION -> "try"   {literal-completion}
    COMPLETION-INSERTION -> "catch" {literal-completion}
    COMPLETION-INSERTION -> "("     {literal-completion}
    COMPLETION-INSERTION -> ")"     {literal-completion}

exports
  lexical syntax
     -> COMPLETION-INSERTION 