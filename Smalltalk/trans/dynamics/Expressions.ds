module trans/dynamics/Expressions

imports
src-gen/ds-signatures/Smalltalk-sig
src-gen/ds-signatures/Base-sig

trans/runtime/values
trans/runtime/store

trans/dynamics/Objects

signature

  constructors
  	NilV: V
    NumV: Int -> V
    BoolV: Bool -> V
    StringV: String -> V
    ListStringV: List(String) -> V
  	BinaryMessageCall: String * V -> Message
    UnaryMessageCall: String -> Message
    KeywordValuePair: String * V ->	KeywordMessageElement
    KeywordMessageCall: List(String) * List(V) -> Message
    MethodExpressionV: BinaryMessageOperand * List(BinaryMessage) -> V
    
  arrows
    Expression --> V
    
    UnaryMessageSelector --> String
    KeywordMessageSelector --> List(String)
    
    SymbolInArrayLiteral --> V
    SymbolLiteral --> V
    StringLiteral --> String
  	
  	Literal --> V
  	Reference --> V
  	Operand --> V
  	UnaryMessage --> Message
  	BinaryMessage --> Message
  	KeywordMessageSegment --> KeywordMessageElement
  	KeywordMessage --> List(Message)
  	MessageChain -->  List(Message)
  	UnaryMessageChain --> List(Message)
  	CascadedMessage --> MessageChain
  	BinaryMessageOperand --> V
  	Keyword --> String
  	KeywordMessageArgument --> V
  	Statement --> V
  	ConstantReference --> V
  	ExecutableCodeRest --> V
  	Message --> Message
  	V --> V
  	List(V) --> List(V)
  	List(BinaryMessage) --> List(Message)
  	List(UnaryMessage) --> List(Message)
  	List(String) --> List(String)
  	KeywordMessageMap(List(KeywordMessageSegment), Message) --> Message
  	ExpI(V, List(Message)) --> V
  	ExpressionCascaded(Operand, MessageChain, List(CascadedMessage)) --> V
  	MethodVMap(List(V)) --> List(V)
//    DynamicDispatch: List(Message) -> V
  native operators
    parseI: String -> Int
    num-call-native: String * V * V -> V
    bool-call-native: String * V * V -> V
    num-call-native: String * V -> V
    bool-call-native: String * V -> V
    num-calls-native: List(String) * List(V) * V -> V
   	printV: V -> V
  components
  	L : List(Message)

rules
	
	StringLit(str) --> str

	SingletonExpression(operand) --> operand.	
	
	Expression(operand, chain, cascaded) --> ExpressionCascaded(operand, chain, cascaded).
	
	ExpressionCascaded(operand, chain, []) --> ExpI(operand, chain).
	
	ExpressionCascaded(operand, chain, [cascadedHead | cascadedTail]) --> result
		where
		ExpI(operand, chain) --> someValue;
		ExpressionCascaded(operand, cascadedHead, cascadedTail) --> result.
	
	CascadedMessage(messageChain) --> messageChain.
	
	Expression(operand, chain, cascaded) --> result
	where 
		ExpI(operand, chain) --> result.
		
	ExpI(operand, [headMessage | tailMessages])  :: S, H --> v4 :: S S2, H H2
		where
		S => S2;
		H => H2;
		case headMessage of {
		UnaryMessageCall(messageName) =>
			case operand of {
			NumV(_) => 
				num-call-native(messageName, operand) => v3;
				ExpI(v3, tailMessages) --> v4
			BoolV(_) =>		
				bool-call-native(messageName, operand) => v3;
				ExpI(v3, tailMessages) --> v4
			RefV(_) =>
				callUnaryMethod(operand, messageName) :: S, H --> v3 :: S1, H1;
				ExpI(v3, tailMessages) :: S1, H1 --> v4 :: S S2, H H2
			}	
		BinaryMessageCall(messageName, v2) =>
			case operand of {
			NumV(_) => 
				num-call-native(messageName, operand, v2) => v3;
				ExpI(v3, tailMessages) --> v4
			BoolV(_) =>		
				bool-call-native(messageName, operand, v2) => v3;
				ExpI(v3, tailMessages) --> v4
			}
		KeywordMessageCall(keywords, methodVs) =>
			case operand of {
			NumV(_) => 
				MethodVMap(methodVs) => values;
				num-calls-native(keywords, values, operand) => v3;
				ExpI(v3, tailMessages) --> v4
			BoolV(true) =>
				keywords => [a, b];
				case a of {
					"ifTrue" =>
						case b of {
							"ifFalse" => 
								methodVs[0] => methodV;
								methodV --> v4
						}
					"ifFalse" =>
						case b of {
							"ifTrue" =>
								methodVs[1] => methodV;
								methodV --> v4
						}
				}
			BoolV(false) =>
				keywords => [a, b];
				case a of {
					"ifTrue" =>
						case b of {
							"ifFalse" => 
								methodVs[1] => methodV;
								methodV --> v4
						}
					"ifFalse" =>
						case b of {
							"ifTrue" =>
								methodVs[0] => methodV;
								methodV --> v4
						}
				}
			RefV(_) =>
//				printV(StringV("cool1")) => _;
				callKeywordMethod(operand, keywords, MethodVMap(methodVs)) :: S, H --> v3 :: S1, H1;
//				printV(BoolV(S1["Metaborg"?])) => _;
				ExpI(v3, tailMessages) :: S1, H1 --> v4 :: S S2, H H2
			}
		}
			
	ExpI(e3, []) --> e3.
	
	MethodVMap([methodVHead | methodVTail]) --> [valueHead | valueTail]
        where 
        methodVHead --> valueHead;
        MethodVMap(methodVTail) => valueTail.
        
    MethodVMap([]) --> [].
	
	
	UnarySIAL(selector) --> StringV(selector).
	KeywordSIAL(selector) --> ListStringV(selector).
	BinarySIAL(selector) --> StringV(selector).
	
	SIALSymbolLiteral(sym) --> sym.
	ConstantSymbolLiteral(sym) --> sym.
	StringSymbolLiteral(str) --> StringV(strv)
	where
		str --> strv
	
		
	Literal(e1) --> e1.
	
	ReferenceOperand(ref) --> ref.
		
	Parenthesis(statement) --> statement.
	
	ReferenceID(id) --> readVar(id).
		
	IntegerLiteral(s) --> NumV(parseI(s)).
	
	StringLiteral(s) --> StringV(s).
	
	ConstantReference(bool) --> bool
		where bool --> BoolV(b).
	StringLiteral(str) --> StringV(strv)
	where
		str --> strv
	LiteralSymbol(sym) --> sym.
//	LiteralArray(arr) --> arr.
	LiteralBlock(blk) --> blk.
	
	
	True() --> BoolV(true).
	False() --> BoolV(false).
	
//	NumV(a) --> NumV(a).
//	BoolV(b) --> BoolV(b).
	
	BinaryMessage(selector, operand) --> BinaryMessageCall(selector, operand).
		
	BinaryMessageChain([bHead | bTail]) --> [b1 | BinaryMessageChain(bTail)]
		where 
		bHead --> b1.
		
	BinaryMessageChain([]) --> [].
	
	BinaryMessageOperand(operand, unarychain) --> ExpI(operand, unaryMessages)
		where
		unarychain --> unaryMessages. 
	
	BinaryMessageChainWithKeyword(binaryMessages, keywordMessage) --> binMessages ++ keyMessage
		where
			BinaryMessageChain(binaryMessages) --> binMessages;
			keywordMessage --> keyMessage.
		
	UnaryMessageChain([uHead | uTail]) --> [u1 | UnaryMessageChain(uTail)]
	where
		uHead --> u1.
		
	UnaryMessageChain([]) --> [].
	
	UnaryMessage(selector) --> UnaryMessageCall(selector).
	
	UnaryMessageSelector(identifier) --> identifier.
	
	UnaryBinaryMessageChain(unaryMessages, binaryMessages) --> uChain ++ bChain
	where
		UnaryMessageChain(unaryMessages) --> uChain;
	 	BinaryMessageChain(binaryMessages) --> bChain.
		
	
	UnaryMessageChainWithKeyword(unaryMessages, binaryMessages, keywordMessage) --> uList ++ kList
	where
		UnaryBinaryMessageChain(unaryMessages, binaryMessages) --> uList;
		keywordMessage --> kList.
	
	KeywordMessageChain(keywordMessage) --> keywordMessage.
	
	KeywordMessage(messageSegment) --> [KeywordMessageCall(keys, values)]
		where
			KeywordMessageMap(messageSegment, KeywordMessageCall([],[])) => KeywordMessageCall(keys, values).
			
	KeywordMessageMap([messageSegmentHead | messageSegmentTail], KeywordMessageCall(curKeys, curVals)) --> message
		where
		messageSegmentHead --> KeywordValuePair(key, value);
		KeywordMessageMap(messageSegmentTail, KeywordMessageCall([key | curKeys], [value | curVals])) => message.
		
	KeywordMessageMap([], KeywordMessageCall(keys, vals)) --> KeywordMessageCall(keys, vals).
	
	KeywordMessageSegment(keyword, keywordMessageArgument) --> KeywordValuePair(key, MethodExpressionV(binOperand, binMessages))
		where
		keyword --> key;
		keywordMessageArgument => MethodExpressionV(binOperand, binMessages).
		
		
	KeywordMessageArgument(binaryMessageOperand, binaryMessages) --> MethodExpressionV(binaryMessageOperand, binaryMessages).
	MethodExpressionV(binaryMessageOperand, binaryMessages) --> ExpI(binaryMessageOperand, BinaryMessageChain(binaryMessages)).
		
	Keyword(key) --> key.	

    