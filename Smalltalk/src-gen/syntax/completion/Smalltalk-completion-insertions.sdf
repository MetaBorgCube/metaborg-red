module completion/Smalltalk-completion-insertions
imports Smalltalk

imports completion/Base-completion-insertions

exports
  context-free start-symbols
    Start PsuedoVariableReference Identifier BinarySelectorChar
    KeywordMessageSelector ObjectArrayLiteral NestedObjectArrayLiteral
    SymbolInArrayLiteral LiteralArrayElement ByteArrayLiteral
    UnsignedIntegerLiteral FormalBlockArgumentDeclaration
    FormalBlockArgumentDeclarationList FormalBlockArgumentDeclarationListWithSep
    ConstantReference IntegerLiteral ScaledDecimalLiteral FloatingPointLiteral
    CharacterLiteral StringLiteral SymbolLiteral ArrayLiteral BlockLiteral
    Literal Reference NestedExpression BinaryMessageOperand
    KeywordMessageArgument KeywordMessageSegment BinaryMessage UnaryMessage
    UnaryMessageChain BinaryMessageChain KeywordMessage Operand MessageChain
    CascadedMessage AssignmentOperation Expression MethodReturnOperator
    LocalVariableDeclarationList ExecutableCodeRest FinalStatement
    DottedStatement Statement Dot UnaryMessageSelector BinaryMessageSelector
    Keyword BindableIdentifier KeywordMethodHeaderSegment UnaryMethodHeader
    BinaryMethodHeader KeywordMethodHeader MethodDeclaration MethodHeader
    ExecutableCode

  context-free syntax
    COMPLETION-INSERTION -> Start                                     {cons("Start-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> PsuedoVariableReference                   {cons("PsuedoVariableReference-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Identifier                                {cons("Identifier-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BinarySelectorChar                        {cons("BinarySelectorChar-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> KeywordMessageSelector                    {cons("KeywordMessageSelector-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ObjectArrayLiteral                        {cons("ObjectArrayLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> NestedObjectArrayLiteral                  {cons("NestedObjectArrayLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> SymbolInArrayLiteral                      {cons("SymbolInArrayLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> LiteralArrayElement                       {cons("LiteralArrayElement-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ByteArrayLiteral                          {cons("ByteArrayLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> UnsignedIntegerLiteral                    {cons("UnsignedIntegerLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> FormalBlockArgumentDeclaration            {cons("FormalBlockArgumentDeclaration-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> FormalBlockArgumentDeclarationList        {cons("FormalBlockArgumentDeclarationList-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> FormalBlockArgumentDeclarationListWithSep {cons("FormalBlockArgumentDeclarationListWithSep-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ConstantReference                         {cons("ConstantReference-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> IntegerLiteral                            {cons("IntegerLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ScaledDecimalLiteral                      {cons("ScaledDecimalLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> FloatingPointLiteral                      {cons("FloatingPointLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> CharacterLiteral                          {cons("CharacterLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> StringLiteral                             {cons("StringLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> SymbolLiteral                             {cons("SymbolLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ArrayLiteral                              {cons("ArrayLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BlockLiteral                              {cons("BlockLiteral-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Literal                                   {cons("Literal-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Reference                                 {cons("Reference-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> NestedExpression                          {cons("NestedExpression-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BinaryMessageOperand                      {cons("BinaryMessageOperand-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> KeywordMessageArgument                    {cons("KeywordMessageArgument-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> KeywordMessageSegment                     {cons("KeywordMessageSegment-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BinaryMessage                             {cons("BinaryMessage-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> UnaryMessage                              {cons("UnaryMessage-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> UnaryMessageChain                         {cons("UnaryMessageChain-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BinaryMessageChain                        {cons("BinaryMessageChain-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> KeywordMessage                            {cons("KeywordMessage-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Operand                                   {cons("Operand-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> MessageChain                              {cons("MessageChain-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> CascadedMessage                           {cons("CascadedMessage-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> AssignmentOperation                       {cons("AssignmentOperation-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Expression                                {cons("Expression-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> MethodReturnOperator                      {cons("MethodReturnOperator-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> LocalVariableDeclarationList              {cons("LocalVariableDeclarationList-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ExecutableCodeRest                        {cons("ExecutableCodeRest-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> FinalStatement                            {cons("FinalStatement-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> DottedStatement                           {cons("DottedStatement-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Statement                                 {cons("Statement-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Dot                                       {cons("Dot-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> UnaryMessageSelector                      {cons("UnaryMessageSelector-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BinaryMessageSelector                     {cons("BinaryMessageSelector-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> Keyword                                   {cons("Keyword-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BindableIdentifier                        {cons("BindableIdentifier-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> KeywordMethodHeaderSegment                {cons("KeywordMethodHeaderSegment-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> UnaryMethodHeader                         {cons("UnaryMethodHeader-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> BinaryMethodHeader                        {cons("BinaryMethodHeader-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> KeywordMethodHeader                       {cons("KeywordMethodHeader-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> MethodDeclaration                         {cons("MethodDeclaration-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> MethodHeader                              {cons("MethodHeader-Plhdr"), placeholder-insertion}
    COMPLETION-INSERTION -> ExecutableCode                            {cons("ExecutableCode-Plhdr"), placeholder-insertion}

  lexical syntax
    COMPLETION-INSERTION -> "nil"         {literal-completion}
    COMPLETION-INSERTION -> "false"       {literal-completion}
    COMPLETION-INSERTION -> "true"        {literal-completion}
    COMPLETION-INSERTION -> "self"        {literal-completion}
    COMPLETION-INSERTION -> "super"       {literal-completion}
    COMPLETION-INSERTION -> "thisContext" {literal-completion}
    COMPLETION-INSERTION -> ":"           {literal-completion}
    COMPLETION-INSERTION -> "#"           {literal-completion}
    COMPLETION-INSERTION -> "#["          {literal-completion}
    COMPLETION-INSERTION -> "["           {literal-completion}
    COMPLETION-INSERTION -> "]"           {literal-completion}
    COMPLETION-INSERTION -> "("           {literal-completion}
    COMPLETION-INSERTION -> ")"           {literal-completion}
    COMPLETION-INSERTION -> ";"           {literal-completion}
    COMPLETION-INSERTION -> ":="          {literal-completion}
    COMPLETION-INSERTION -> "^"           {literal-completion}
    COMPLETION-INSERTION -> "|"           {literal-completion}
    COMPLETION-INSERTION -> "."           {literal-completion}

exports
  lexical syntax
     -> COMPLETION-INSERTION 