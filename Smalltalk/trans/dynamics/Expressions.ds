module trans/dynamics/Expressions

imports
src-gen/ds-signatures/Smalltalk-sig
src-gen/ds-signatures/Base-sig

trans/runtime/values
trans/runtime/store

signature

  constructors
  	NoneV: V
    NumV: Int -> V
    BoolV: Bool -> V
    StringV: String -> V
  	MessageCall: String * V -> Message
//    MessageCall: String -> Message
    ExpI: V * List(Message) -> V
    
  arrows
    Expression --> V
  	
  	Literal --> V
  	Reference --> V
  	Operand --> V
  	UnaryMessage --> Message
  	BinaryMessage --> Message
  	MessageChain -->  List(Message)
  	BinaryMessageOperand --> V
  	UnaryMessageSelector --> String
  	Statement --> V
  	ConstantReference --> V
  	ExecutableCodeRest --> V
  	V --> V
  	Message --> Message
  	List(BinaryMessage) --> List(Message)
  	List(UnaryMessage) --> List(Message)
  native operators
    parseI: String -> Int
    num-call-native: String * V * V -> V
    bool-call-native: String * V * V -> V
    num-call-native: String * V -> V
    bool-call-native: String * V -> V
  components
  	L : List(Message)

rules

	SingletonExpression(e1) --> e1.	
	
	Expression(e1, e2, cascaded) --> e3
	where 
		e2 --> [a | b];
		a --> y;
		ExpI(e1, [a | b]) --> e3.
		
	ExpI(v1, [message | rest]) --> v4
		where
		message --> reduced;
		case reduced of {
		MessageCall(messageName, NoneV()) =>
			case v1 of {
			NumV(i1) => 
				num-call-native(messageName, v1) => v3;
				ExpI(v3, rest) --> v4
			BoolV(b1) =>		
				bool-call-native(messageName, v1) => v3;
				ExpI(v3, rest) --> v4
			}	
		MessageCall(messageName, v2) =>
			case v1 of {
			NumV(i1) => 
				num-call-native(messageName, v1, v2) => v3;
				ExpI(v3, rest) --> v4
			BoolV(b1) =>		
				bool-call-native(messageName, v1, v2) => v3;
				ExpI(v3, rest) --> v4
			}			
		}
			
	ExpI(e3, []) --> e3.
	
		
	Literal(e1) --> e1.
	ReferenceOperand(ref) --> ref.
	
	ReferenceID(id) --> readVar(id).
		
	IntegerLiteral(s) --> NumV(parseI(s)).
	ConstantReference(bool) --> bool
		where bool --> BoolV(b).
	
	True() --> BoolV(true).
	False() --> BoolV(false).
	
	NumV(a) --> NumV(a).
	BoolV(b) --> BoolV(b).
	
	BinaryMessage(selector, operand) --> MessageCall(selector, operand).

//	BinaryMessage(binMessage, messageChain) --> [binMessage | messageChain].
	
	BinaryMessageOperand(literal, unarychain) --> literal.
	
	BinaryMessageChain([a | b]) --> [y | BinaryMessageChain(b)]
		where 
		a --> y.
	BinaryMessageChain([]) --> [].
	
	UnaryMessage(selector) --> MessageCall(selector, NoneV()).
	
	UnaryMessageSelector(identifier) --> identifier.
	
	UnaryMessageChain([u1 | urest], binaryMessages) --> [y | UnaryMessageChain(urest, binaryMessages)]
		where
		u1 --> y.
//	KeywordMessageChain(keywordMessage) --> 
	
//	NestedExpression(statement) --> statement.

	BinaryMessageOperand(literal, chain) --> literal. 
    