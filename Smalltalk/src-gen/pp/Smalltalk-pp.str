module pp/Smalltalk-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libstratego-sglr
  signatures/Smalltalk-sig


imports
  signatures/Base-sig


imports
  pp/Base-pp


strategies
  prettyprint-example =
    prettyprint-Smalltalk

  prettyprint-Smalltalk =
    fail

  prettyprint-Smalltalk(|sort) =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-Smalltalk-start-symbols

  prettyprint-Smalltalk-start-symbols =
    fail


strategies
  prettyprint-Smalltalk-start-symbols =
    prettyprint-Smalltalk-Prog


strategies
  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Prog

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Start

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Reference

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ConstantReference

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-PsuedoVariableReference

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BindableIdentifier

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-UnaryMessageSelector

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Keyword

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-KeywordMessageSelector

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BinaryMessageSelector

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-SymbolInArrayLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-SymbolLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ArrayLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ObjectArrayLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-NestedObjectArrayLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-LiteralArrayElement

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ByteArrayLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-FormalBlockArgumentDeclaration

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-FormalBlockArgumentDeclarationList

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BlockLiteral

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Literal

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-NestedExpression

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Operand

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-UnaryMessage

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-UnaryMessageChain

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BinaryMessageOperand

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BinaryMessage

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BinaryMessageChain

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-KeywordMessageArgument

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-KeywordMessageSegment

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-KeywordMessage

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-MessageChain

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-CascadedMessage

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Expression

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ExpressionRest

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-AssignmentOperation

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Statement

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-MethodReturnOperator

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-FinalStatement

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-LocalVariableDeclarationList

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ExecutableCode

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-ExecutableCodeRest

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-DottedStatement

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-Dot

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-UnaryMethodHeader

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-BinaryMethodHeader

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-KeywordMethodHeaderSegment

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-KeywordMethodHeader

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-MethodHeader

  prettyprint-Smalltalk =
    prettyprint-Smalltalk-MethodDeclaration

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Prog>
    where <?"Prog"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Start>
    where <?"Start"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Reference>
    where <?"Reference"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ConstantReference>
    where <?"ConstantReference"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-PsuedoVariableReference>
    where <?"PsuedoVariableReference"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BindableIdentifier>
    where <?"BindableIdentifier"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-UnaryMessageSelector>
    where <?"UnaryMessageSelector"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Keyword>
    where <?"Keyword"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-KeywordMessageSelector>
    where <?"KeywordMessageSelector"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BinaryMessageSelector>
    where <?"BinaryMessageSelector"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-SymbolInArrayLiteral>
    where <?"SymbolInArrayLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-SymbolLiteral>
    where <?"SymbolLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ArrayLiteral>
    where <?"ArrayLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ObjectArrayLiteral>
    where <?"ObjectArrayLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-NestedObjectArrayLiteral>
    where <?"NestedObjectArrayLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-LiteralArrayElement>
    where <?"LiteralArrayElement"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ByteArrayLiteral>
    where <?"ByteArrayLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-FormalBlockArgumentDeclaration>
    where <?"FormalBlockArgumentDeclaration"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-FormalBlockArgumentDeclarationList>
    where <?"FormalBlockArgumentDeclarationList"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep>
    where <?"FormalBlockArgumentDeclarationListWithSep"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BlockLiteral>
    where <?"BlockLiteral"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Literal>
    where <?"Literal"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-NestedExpression>
    where <?"NestedExpression"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Operand>
    where <?"Operand"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-UnaryMessage>
    where <?"UnaryMessage"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-UnaryMessageChain>
    where <?"UnaryMessageChain"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BinaryMessageOperand>
    where <?"BinaryMessageOperand"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BinaryMessage>
    where <?"BinaryMessage"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BinaryMessageChain>
    where <?"BinaryMessageChain"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-KeywordMessageArgument>
    where <?"KeywordMessageArgument"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-KeywordMessageSegment>
    where <?"KeywordMessageSegment"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-KeywordMessage>
    where <?"KeywordMessage"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-MessageChain>
    where <?"MessageChain"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-CascadedMessage>
    where <?"CascadedMessage"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Expression>
    where <?"Expression"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ExpressionRest>
    where <?"ExpressionRest"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-AssignmentOperation>
    where <?"AssignmentOperation"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Statement>
    where <?"Statement"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-MethodReturnOperator>
    where <?"MethodReturnOperator"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-FinalStatement>
    where <?"FinalStatement"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-LocalVariableDeclarationList>
    where <?"LocalVariableDeclarationList"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ExecutableCode>
    where <?"ExecutableCode"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-ExecutableCodeRest>
    where <?"ExecutableCodeRest"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-DottedStatement>
    where <?"DottedStatement"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-Dot>
    where <?"Dot"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-UnaryMethodHeader>
    where <?"UnaryMethodHeader"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-BinaryMethodHeader>
    where <?"BinaryMethodHeader"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-KeywordMethodHeaderSegment>
    where <?"KeywordMethodHeaderSegment"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-KeywordMethodHeader>
    where <?"KeywordMethodHeader"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-MethodHeader>
    where <?"MethodHeader"> sort

  prettyprint-Smalltalk(|sort):
    t -> <prettyprint-Smalltalk-MethodDeclaration>
    where <?"MethodDeclaration"> sort

  prettyprint-Smalltalk-Prog :
    Program(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__']
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Start) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Prog =
    ?Program(_)

  Smalltalk-get-indent :
    (t@Program(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Prog"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Program(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Prog"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Program(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Prog"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Start :
    Temp(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Start =
    ?Temp(_)

  Smalltalk-get-indent :
    (t@Temp(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Temp(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Temp(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Start :
    MethodDeclaration(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__']
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-MethodDeclaration) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Start =
    ?MethodDeclaration(_)

  Smalltalk-get-indent :
    (t@MethodDeclaration(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@MethodDeclaration(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@MethodDeclaration(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Start :
    ExecutableCode(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ExecutableCode) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Start =
    ?ExecutableCode(_)

  Smalltalk-get-indent :
    (t@ExecutableCode(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ExecutableCode(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ExecutableCode(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Start"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Reference :
    ReferenceID(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Identifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Reference =
    ?ReferenceID(_)

  Smalltalk-get-indent :
    (t@ReferenceID(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Reference"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ReferenceID(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Reference"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ReferenceID(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Reference"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ConstantReference :
    Null() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("nil")]
                )
              ]

  is-Smalltalk-ConstantReference =
    ?Null()

  Smalltalk-get-indent :
    (t@Null(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Null(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Null(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ConstantReference :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  is-Smalltalk-ConstantReference =
    ?False()

  Smalltalk-get-indent :
    (t@False(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@False(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@False(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ConstantReference :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  is-Smalltalk-ConstantReference =
    ?True()

  Smalltalk-get-indent :
    (t@True(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@True(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@True(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ConstantReference"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-PsuedoVariableReference :
    Self() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("self")]
                )
              ]

  is-Smalltalk-PsuedoVariableReference =
    ?Self()

  Smalltalk-get-indent :
    (t@Self(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Self(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Self(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-PsuedoVariableReference :
    Super() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("super")]
                 )
               ]

  is-Smalltalk-PsuedoVariableReference =
    ?Super()

  Smalltalk-get-indent :
    (t@Super(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Super(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Super(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-PsuedoVariableReference :
    This() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("thisContext")]
                )
              ]

  is-Smalltalk-PsuedoVariableReference =
    ?This()

  Smalltalk-get-indent :
    (t@This(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@This(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@This(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"PsuedoVariableReference"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BindableIdentifier :
    BindableIdentifier(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Identifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-BindableIdentifier =
    ?BindableIdentifier(_)

  Smalltalk-get-indent :
    (t@BindableIdentifier(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BindableIdentifier"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BindableIdentifier(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BindableIdentifier"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BindableIdentifier(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BindableIdentifier"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-UnaryMessageSelector :
    UnaryMessageSelector1(t1__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [t1__']
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Identifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-UnaryMessageSelector =
    ?UnaryMessageSelector1(_)

  Smalltalk-get-indent :
    (t@UnaryMessageSelector1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"UnaryMessageSelector"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnaryMessageSelector1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"UnaryMessageSelector"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnaryMessageSelector1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"UnaryMessageSelector"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Keyword :
    Keyword(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__', S(" :")]
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Identifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Keyword =
    ?Keyword(_)

  Smalltalk-get-indent :
    (t@Keyword(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Keyword"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Keyword(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Keyword"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Keyword(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Keyword"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-KeywordMessageSelector :
    KeywordMessageSelector1(t1__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [t1__']
                                       )
                                     ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-Keyword) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-KeywordMessageSelector =
    ?KeywordMessageSelector1(_)

  Smalltalk-get-indent :
    (t@KeywordMessageSelector1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageSelector"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMessageSelector1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageSelector"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMessageSelector1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageSelector"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BinaryMessageSelector :
    UnarySelector(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinarySelectorChar) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-BinaryMessageSelector =
    ?UnarySelector(_)

  Smalltalk-get-indent :
    (t@UnarySelector(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageSelector"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnarySelector(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageSelector"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnarySelector(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageSelector"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BinaryMessageSelector :
    BinarySelector(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinarySelectorChar) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BinarySelectorChar) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-BinaryMessageSelector =
    ?BinarySelector(_, _)

  Smalltalk-get-indent :
    (t@BinarySelector(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageSelector"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinarySelector(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageSelector"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinarySelector(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageSelector"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-SymbolInArrayLiteral :
    UnaryMessageSelector2(t1__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [t1__']
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-SymbolInArrayLiteral =
    ?UnaryMessageSelector2(_)

  Smalltalk-get-indent :
    (t@UnaryMessageSelector2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnaryMessageSelector2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnaryMessageSelector2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-SymbolInArrayLiteral :
    KeywordMessageSelector2(t1__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [t1__']
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-KeywordMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-SymbolInArrayLiteral =
    ?KeywordMessageSelector2(_)

  Smalltalk-get-indent :
    (t@KeywordMessageSelector2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMessageSelector2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMessageSelector2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-SymbolInArrayLiteral :
    BinaryMessageSelector2(t1__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [t1__']
                                      )
                                    ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-SymbolInArrayLiteral =
    ?BinaryMessageSelector2(_)

  Smalltalk-get-indent :
    (t@BinaryMessageSelector2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMessageSelector2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMessageSelector2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SymbolInArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-SymbolLiteral :
    SymbolInArrayLiteral1(t1__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("# "), t1__']
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-SymbolInArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-SymbolLiteral =
    ?SymbolInArrayLiteral1(_)

  Smalltalk-get-indent :
    (t@SymbolInArrayLiteral1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@SymbolInArrayLiteral1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@SymbolInArrayLiteral1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-SymbolLiteral :
    ConstantReference2(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("# "), t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ConstantReference) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-SymbolLiteral =
    ?ConstantReference2(_)

  Smalltalk-get-indent :
    (t@ConstantReference2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ConstantReference2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ConstantReference2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-SymbolLiteral :
    StringLiteral1(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("# "), t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-StringLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-SymbolLiteral =
    ?StringLiteral1(_)

  Smalltalk-get-indent :
    (t@StringLiteral1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@StringLiteral1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@StringLiteral1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"SymbolLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ArrayLiteral :
    ObjectArrayLiteral1(t1__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__']
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ObjectArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-ArrayLiteral =
    ?ObjectArrayLiteral1(_)

  Smalltalk-get-indent :
    (t@ObjectArrayLiteral1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ObjectArrayLiteral1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ObjectArrayLiteral1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ArrayLiteral :
    ByteArrayLiteral1(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__']
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ByteArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-ArrayLiteral =
    ?ByteArrayLiteral1(_)

  Smalltalk-get-indent :
    (t@ByteArrayLiteral1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ByteArrayLiteral1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ByteArrayLiteral1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ObjectArrayLiteral :
    ObjectArrayLiteral2(t1__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("# "), t1__']
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-NestedObjectArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-ObjectArrayLiteral =
    ?ObjectArrayLiteral2(_)

  Smalltalk-get-indent :
    (t@ObjectArrayLiteral2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ObjectArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ObjectArrayLiteral2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ObjectArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ObjectArrayLiteral2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ObjectArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-NestedObjectArrayLiteral :
    NestedObjectArrayLiteral1(t1__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ S("( ")
                                           , t1__'
                                           , S(" )")
                                           ]
                                         )
                                       ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-LiteralArrayElement) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-NestedObjectArrayLiteral =
    ?NestedObjectArrayLiteral1(_)

  Smalltalk-get-indent :
    (t@NestedObjectArrayLiteral1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NestedObjectArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@NestedObjectArrayLiteral1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NestedObjectArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@NestedObjectArrayLiteral1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NestedObjectArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-LiteralArrayElement :
    Literal1(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Literal) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-LiteralArrayElement =
    ?Literal1(_)

  Smalltalk-get-indent :
    (t@Literal1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Literal1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Literal1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-LiteralArrayElement :
    NestedObjectArrayLiteral2(t1__) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [t1__']
                                         )
                                       ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-NestedObjectArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-LiteralArrayElement =
    ?NestedObjectArrayLiteral2(_)

  Smalltalk-get-indent :
    (t@NestedObjectArrayLiteral2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@NestedObjectArrayLiteral2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@NestedObjectArrayLiteral2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-LiteralArrayElement :
    SymbolInArrayLiteral2(t1__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [t1__']
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-SymbolInArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-LiteralArrayElement =
    ?SymbolInArrayLiteral2(_)

  Smalltalk-get-indent :
    (t@SymbolInArrayLiteral2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@SymbolInArrayLiteral2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@SymbolInArrayLiteral2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-LiteralArrayElement :
    ConstantReference3(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ConstantReference) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-LiteralArrayElement =
    ?ConstantReference3(_)

  Smalltalk-get-indent :
    (t@ConstantReference3(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ConstantReference3(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ConstantReference3(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LiteralArrayElement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ByteArrayLiteral :
    ByteArrayLiteral2(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ S("#[ ")
                                   , t1__'
                                   , S(" ]")
                                   ]
                                 )
                               ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-UnsignedIntegerLiteral|"")
                   <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-ByteArrayLiteral =
    ?ByteArrayLiteral2(_)

  Smalltalk-get-indent :
    (t@ByteArrayLiteral2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ByteArrayLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ByteArrayLiteral2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ByteArrayLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ByteArrayLiteral2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ByteArrayLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-FormalBlockArgumentDeclaration :
    FormalBlockArgumentDeclaration(t1__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [t1__']
                                              )
                                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BindableIdentifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-FormalBlockArgumentDeclaration =
    ?FormalBlockArgumentDeclaration(_)

  Smalltalk-get-indent :
    (t@FormalBlockArgumentDeclaration(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FormalBlockArgumentDeclaration"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@FormalBlockArgumentDeclaration(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FormalBlockArgumentDeclaration"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@FormalBlockArgumentDeclaration(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FormalBlockArgumentDeclaration"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationList :
    FormalBlockArgumentDeclarationList(t1__) -> [ H(
                                                    [SOpt(HS(), "0")]
                                                  , [t1__']
                                                  )
                                                ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-FormalBlockArgumentDeclaration) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-FormalBlockArgumentDeclarationList =
    ?FormalBlockArgumentDeclarationList(_)

  Smalltalk-get-indent :
    (t@FormalBlockArgumentDeclarationList(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FormalBlockArgumentDeclarationList"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@FormalBlockArgumentDeclarationList(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FormalBlockArgumentDeclarationList"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@FormalBlockArgumentDeclarationList(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FormalBlockArgumentDeclarationList"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__', S(" |")]
              )
            ]
    where not(is-Smalltalk-FormalBlockArgumentDeclarationListWithSep)
    where t1__' := <pp-one-Z(prettyprint-Smalltalk-FormalBlockArgumentDeclarationList) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  prettyprint-Smalltalk-BlockLiteral :
    BlockLiteral1(t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [ S("[ ")
                                     , t1__'
                                     , S(" ")
                                     , t2__'
                                     , S(" ]")
                                     ]
                                   )
                                 ]
    with t1__' := <pp-option(
                     pp-one-Z(prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-ExecutableCode) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-BlockLiteral =
    ?BlockLiteral1(_, _)

  Smalltalk-get-indent :
    (t@BlockLiteral1(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BlockLiteral"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BlockLiteral1(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BlockLiteral"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BlockLiteral1(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BlockLiteral"> sort
    with switch !index
           case ?1 :
             ws := " "
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    ConstantReference4(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ConstantReference) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?ConstantReference4(_)

  Smalltalk-get-indent :
    (t@ConstantReference4(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ConstantReference4(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ConstantReference4(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    IntegerLiteral(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-IntegerLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?IntegerLiteral(_)

  Smalltalk-get-indent :
    (t@IntegerLiteral(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@IntegerLiteral(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@IntegerLiteral(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    ScaledDecimalLiteral(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ScaledDecimalLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?ScaledDecimalLiteral(_)

  Smalltalk-get-indent :
    (t@ScaledDecimalLiteral(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ScaledDecimalLiteral(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ScaledDecimalLiteral(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    FloatingPointLiteral(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-FloatingPointLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?FloatingPointLiteral(_)

  Smalltalk-get-indent :
    (t@FloatingPointLiteral(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@FloatingPointLiteral(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@FloatingPointLiteral(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    CharacterLiteral(t1__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__']
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-CharacterLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?CharacterLiteral(_)

  Smalltalk-get-indent :
    (t@CharacterLiteral(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@CharacterLiteral(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@CharacterLiteral(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    StringLiteral2(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-StringLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?StringLiteral2(_)

  Smalltalk-get-indent :
    (t@StringLiteral2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@StringLiteral2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@StringLiteral2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    SymbolLiteral(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-SymbolLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?SymbolLiteral(_)

  Smalltalk-get-indent :
    (t@SymbolLiteral(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@SymbolLiteral(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@SymbolLiteral(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    ArrayLiteral(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-ArrayLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?ArrayLiteral(_)

  Smalltalk-get-indent :
    (t@ArrayLiteral(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ArrayLiteral(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ArrayLiteral(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Literal :
    BlockLiteral2(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [t1__']
                             )
                           ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BlockLiteral) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Literal =
    ?BlockLiteral2(_)

  Smalltalk-get-indent :
    (t@BlockLiteral2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BlockLiteral2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BlockLiteral2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Literal"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-NestedExpression :
    NestedExpression1(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [ S("( ")
                                   , t1__'
                                   , S(" )")
                                   ]
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-NestedExpression =
    ?NestedExpression1(_)

  Smalltalk-get-indent :
    (t@NestedExpression1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"NestedExpression"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@NestedExpression1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"NestedExpression"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@NestedExpression1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"NestedExpression"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Operand :
    Literal2(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Literal) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Operand =
    ?Literal2(_)

  Smalltalk-get-indent :
    (t@Literal2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Literal2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Literal2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Operand :
    Reference(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Reference) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Operand =
    ?Reference(_)

  Smalltalk-get-indent :
    (t@Reference(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Reference(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Reference(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Operand :
    NestedExpression2(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__']
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-NestedExpression) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-Operand =
    ?NestedExpression2(_)

  Smalltalk-get-indent :
    (t@NestedExpression2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@NestedExpression2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@NestedExpression2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Operand"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-UnaryMessage :
    UnaryMessage(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [t1__']
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-UnaryMessage =
    ?UnaryMessage(_)

  Smalltalk-get-indent :
    (t@UnaryMessage(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"UnaryMessage"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnaryMessage(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"UnaryMessage"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnaryMessage(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"UnaryMessage"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-UnaryMessageChain :
    UnaryMessageChain(t1__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__']
                                 )
                               ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-UnaryMessage) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-UnaryMessageChain =
    ?UnaryMessageChain(_)

  Smalltalk-get-indent :
    (t@UnaryMessageChain(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"UnaryMessageChain"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnaryMessageChain(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"UnaryMessageChain"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnaryMessageChain(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"UnaryMessageChain"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BinaryMessageOperand :
    BinaryMessageOperand(t1__, t2__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [t1__', S(" "), t2__']
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Operand) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-BinaryMessageOperand =
    ?BinaryMessageOperand(_, _)

  Smalltalk-get-indent :
    (t@BinaryMessageOperand(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageOperand"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMessageOperand(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageOperand"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMessageOperand(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageOperand"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BinaryMessage :
    BinaryMessage1(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageOperand) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-BinaryMessage =
    ?BinaryMessage1(_, _)

  Smalltalk-get-indent :
    (t@BinaryMessage1(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BinaryMessage"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMessage1(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BinaryMessage"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMessage1(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BinaryMessage"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BinaryMessageChain :
    BinaryMessageChain(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-BinaryMessage) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-BinaryMessageChain =
    ?BinaryMessageChain(_)

  Smalltalk-get-indent :
    (t@BinaryMessageChain(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageChain"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMessageChain(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageChain"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMessageChain(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BinaryMessageChain"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-KeywordMessageArgument :
    KeywordMessageArgument(t1__, t2__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [t1__', S(" "), t2__']
                                            )
                                          ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageOperand) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-KeywordMessageArgument =
    ?KeywordMessageArgument(_, _)

  Smalltalk-get-indent :
    (t@KeywordMessageArgument(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageArgument"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMessageArgument(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageArgument"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMessageArgument(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageArgument"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-KeywordMessageSegment :
    KeywordMessageSegment(t1__, t2__) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [t1__', S(" "), t2__']
                                           )
                                         ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Keyword) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-KeywordMessageArgument) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-KeywordMessageSegment =
    ?KeywordMessageSegment(_, _)

  Smalltalk-get-indent :
    (t@KeywordMessageSegment(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageSegment"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMessageSegment(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageSegment"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMessageSegment(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"KeywordMessageSegment"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-KeywordMessage :
    KeywordMessage(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-KeywordMessageSegment) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Smalltalk-KeywordMessageSegment) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-KeywordMessage =
    ?KeywordMessage(_, _)

  Smalltalk-get-indent :
    (t@KeywordMessage(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"KeywordMessage"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMessage(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"KeywordMessage"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMessage(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"KeywordMessage"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MessageChain :
    KeywordMessage(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-KeywordMessage) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-MessageChain =
    ?KeywordMessage(_)

  Smalltalk-get-indent :
    (t@KeywordMessage(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMessage(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMessage(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MessageChain :
    BinaryMessage2(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessage) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-MessageChain =
    ?BinaryMessage2(_, _)

  Smalltalk-get-indent :
    (t@BinaryMessage2(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMessage2(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMessage2(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MessageChain :
    KeywordMessage(t1__, t2__, t3__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [ t1__'
                                            , S(" ")
                                            , t2__'
                                            , S(" ")
                                            , t3__'
                                            ]
                                          )
                                        ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessage) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Smalltalk-KeywordMessage) <+ pp-one-Z(prettyprint-completion-aux)> t3__

  is-Smalltalk-MessageChain =
    ?KeywordMessage(_, _, _)

  Smalltalk-get-indent :
    ( t@KeywordMessage(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    ( t@KeywordMessage(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    ( t@KeywordMessage(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MessageChain :
    UnaryMessage(t1__, t2__, t3__, t4__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [ t1__'
                                                , S(" ")
                                                , t2__'
                                                , S(" ")
                                                , t3__'
                                                , S(" ")
                                                , t4__'
                                                ]
                                              )
                                            ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMessage) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t3__
    with t4__' := <pp-option(
                     pp-one-Z(prettyprint-Smalltalk-KeywordMessage) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t4__

  is-Smalltalk-MessageChain =
    ?UnaryMessage(_, _, _, _)

  Smalltalk-get-indent :
    ( t@UnaryMessage(t1__, t2__, t3__, t4__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           case ?4 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    ( t@UnaryMessage(t1__, t2__, t3__, t4__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           case ?4 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    ( t@UnaryMessage(t1__, t2__, t3__, t4__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"MessageChain"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           case ?4 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-CascadedMessage :
    CascadedMessage(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("; "), t1__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-MessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-CascadedMessage =
    ?CascadedMessage(_)

  Smalltalk-get-indent :
    (t@CascadedMessage(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"CascadedMessage"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@CascadedMessage(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"CascadedMessage"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@CascadedMessage(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"CascadedMessage"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Expression :
    Expression(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" "), t2__']
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Operand) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-ExpressionRest) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-Expression =
    ?Expression(_, _)

  Smalltalk-get-indent :
    (t@Expression(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Expression(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Expression(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Expression"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ExpressionRest :
    EREmpty() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-Smalltalk-ExpressionRest =
    ?EREmpty()

  Smalltalk-get-indent :
    (t@EREmpty(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ExpressionRest"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@EREmpty(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ExpressionRest"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@EREmpty(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ExpressionRest"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ExpressionRest :
    ExpressionRest(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" "), t2__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-MessageChain) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-H-list(prettyprint-Smalltalk-CascadedMessage) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-ExpressionRest =
    ?ExpressionRest(_, _)

  Smalltalk-get-indent :
    (t@ExpressionRest(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ExpressionRest"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ExpressionRest(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ExpressionRest"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ExpressionRest(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ExpressionRest"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-AssignmentOperation :
    AssignmentOperation(t1__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [t1__', S(" :=")]
                                   )
                                 ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BindableIdentifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-AssignmentOperation =
    ?AssignmentOperation(_)

  Smalltalk-get-indent :
    (t@AssignmentOperation(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"AssignmentOperation"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@AssignmentOperation(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"AssignmentOperation"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@AssignmentOperation(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"AssignmentOperation"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Statement :
    Statement(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" "), t2__']
                               )
                             ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-AssignmentOperation) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-Expression) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-Statement =
    ?Statement(_, _)

  Smalltalk-get-indent :
    (t@Statement(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Statement(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Statement(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Statement"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MethodReturnOperator :
    MethodReturnOperator() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("^")]
                                )
                              ]

  is-Smalltalk-MethodReturnOperator =
    ?MethodReturnOperator()

  Smalltalk-get-indent :
    (t@MethodReturnOperator(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MethodReturnOperator"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@MethodReturnOperator(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MethodReturnOperator"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@MethodReturnOperator(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MethodReturnOperator"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-FinalStatement :
    FinalStatement(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(", "), t2__']
                                    )
                                  ]
    with t1__' := <pp-option(
                     pp-one-Z(prettyprint-Smalltalk-MethodReturnOperator) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-FinalStatement =
    ?FinalStatement(_, _)

  Smalltalk-get-indent :
    (t@FinalStatement(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FinalStatement"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@FinalStatement(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FinalStatement"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@FinalStatement(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FinalStatement"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-LocalVariableDeclarationList :
    LocalVariableDeclarationList(t1__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ S("| ")
                                              , t1__'
                                              , S(" |")
                                              ]
                                            )
                                          ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-BindableIdentifier) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-LocalVariableDeclarationList =
    ?LocalVariableDeclarationList(_)

  Smalltalk-get-indent :
    (t@LocalVariableDeclarationList(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"LocalVariableDeclarationList"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@LocalVariableDeclarationList(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"LocalVariableDeclarationList"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@LocalVariableDeclarationList(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"LocalVariableDeclarationList"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ExecutableCode :
    ExecutableCode(t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__', S(" "), t2__']
                                    )
                                  ]
    with t1__' := <pp-option(
                     pp-one-Z(prettyprint-Smalltalk-LocalVariableDeclarationList) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t1__
    with t2__' := <pp-option(
                     pp-one-Z(prettyprint-Smalltalk-ExecutableCodeRest) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t2__

  is-Smalltalk-ExecutableCode =
    ?ExecutableCode(_, _)

  Smalltalk-get-indent :
    (t@ExecutableCode(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"ExecutableCode"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@ExecutableCode(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"ExecutableCode"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@ExecutableCode(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"ExecutableCode"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-ExecutableCodeRest :
    ExecutableCodeRest(t1__, t2__, t3__) -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [ t1__'
                                                , S(" ")
                                                , t2__'
                                                , S(" ")
                                                , t3__'
                                                ]
                                              )
                                            ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-DottedStatement) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-FinalStatement) <+ pp-one-Z(prettyprint-completion-aux)> t2__
    with t3__' := <pp-option(
                     pp-one-Z(prettyprint-Smalltalk-Dot) <+ pp-one-Z(prettyprint-completion-aux)
                   )> t3__

  is-Smalltalk-ExecutableCodeRest =
    ?ExecutableCodeRest(_, _, _)

  Smalltalk-get-indent :
    ( t@ExecutableCodeRest(t1__, t2__, t3__)
    , index
    ) -> indent
    where sort := <ia-get-sort> t
          ; <?"ExecutableCodeRest"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           case ?3 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    ( t@ExecutableCodeRest(t1__, t2__, t3__)
    , index
    ) -> separator
    where sort := <ia-get-sort> t
          ; <?"ExecutableCodeRest"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           case ?3 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    ( t@ExecutableCodeRest(t1__, t2__, t3__)
    , index
    ) -> ws
    where sort := <ia-get-sort> t
          ; <?"ExecutableCodeRest"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           case ?3 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-DottedStatement :
    DottedStatement(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" .")]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Statement) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-DottedStatement =
    ?DottedStatement(_)

  Smalltalk-get-indent :
    (t@DottedStatement(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"DottedStatement"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@DottedStatement(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"DottedStatement"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@DottedStatement(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"DottedStatement"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-Dot :
    Dot() -> [ H(
                 [SOpt(HS(), "0")]
               , [S(".")]
               )
             ]

  is-Smalltalk-Dot =
    ?Dot()

  Smalltalk-get-indent :
    (t@Dot(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"Dot"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@Dot(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"Dot"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@Dot(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"Dot"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-UnaryMethodHeader :
    UnaryMethodHeader1(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-UnaryMethodHeader =
    ?UnaryMethodHeader1(_)

  Smalltalk-get-indent :
    (t@UnaryMethodHeader1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"UnaryMethodHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnaryMethodHeader1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"UnaryMethodHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnaryMethodHeader1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"UnaryMethodHeader"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-BinaryMethodHeader :
    BinaryMethodHeader(t1__, t2__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [t1__', S(" "), t2__']
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMessageSelector) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BindableIdentifier) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-BinaryMethodHeader =
    ?BinaryMethodHeader(_, _)

  Smalltalk-get-indent :
    (t@BinaryMethodHeader(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"BinaryMethodHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMethodHeader(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"BinaryMethodHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMethodHeader(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"BinaryMethodHeader"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-KeywordMethodHeaderSegment :
    KeywordMethodHeaderSegment(t1__, t2__) -> [ H(
                                                  [SOpt(HS(), "0")]
                                                , [t1__', S(" "), t2__']
                                                )
                                              ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-Keyword) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-BindableIdentifier) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-KeywordMethodHeaderSegment =
    ?KeywordMethodHeaderSegment(_, _)

  Smalltalk-get-indent :
    (t@KeywordMethodHeaderSegment(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"KeywordMethodHeaderSegment"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMethodHeaderSegment(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"KeywordMethodHeaderSegment"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMethodHeaderSegment(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"KeywordMethodHeaderSegment"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-KeywordMethodHeader :
    KeywordMethodHeader1(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__']
                                    )
                                  ]
    with t1__' := <pp-H-list(prettyprint-Smalltalk-KeywordMethodHeaderSegment) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-KeywordMethodHeader =
    ?KeywordMethodHeader1(_)

  Smalltalk-get-indent :
    (t@KeywordMethodHeader1(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"KeywordMethodHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMethodHeader1(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"KeywordMethodHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMethodHeader1(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"KeywordMethodHeader"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MethodHeader :
    UnaryMethodHeader2(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-UnaryMethodHeader) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-MethodHeader =
    ?UnaryMethodHeader2(_)

  Smalltalk-get-indent :
    (t@UnaryMethodHeader2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@UnaryMethodHeader2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@UnaryMethodHeader2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MethodHeader :
    BinaryMethodHeader(t1__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [t1__']
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-BinaryMethodHeader) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-MethodHeader =
    ?BinaryMethodHeader(_)

  Smalltalk-get-indent :
    (t@BinaryMethodHeader(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@BinaryMethodHeader(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@BinaryMethodHeader(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MethodHeader :
    KeywordMethodHeader2(t1__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [t1__']
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-KeywordMethodHeader) <+ pp-one-Z(prettyprint-completion-aux)> t1__

  is-Smalltalk-MethodHeader =
    ?KeywordMethodHeader2(_)

  Smalltalk-get-indent :
    (t@KeywordMethodHeader2(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@KeywordMethodHeader2(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@KeywordMethodHeader2(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MethodHeader"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-Smalltalk-MethodDeclaration :
    MethodDeclaration(t1__, t2__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [t1__', S(" "), t2__']
                                       )
                                     ]
    with t1__' := <pp-one-Z(prettyprint-Smalltalk-MethodHeader) <+ pp-one-Z(prettyprint-completion-aux)> t1__
    with t2__' := <pp-one-Z(prettyprint-Smalltalk-ExecutableCode) <+ pp-one-Z(prettyprint-completion-aux)> t2__

  is-Smalltalk-MethodDeclaration =
    ?MethodDeclaration(_, _)

  Smalltalk-get-indent :
    (t@MethodDeclaration(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"MethodDeclaration"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  Smalltalk-get-separator :
    (t@MethodDeclaration(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"MethodDeclaration"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  Smalltalk-get-leading-ws :
    (t@MethodDeclaration(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"MethodDeclaration"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-Smalltalk-Prog =
    fail

  is-Smalltalk-Start =
    fail

  is-Smalltalk-Reference =
    fail

  is-Smalltalk-ConstantReference =
    fail

  is-Smalltalk-PsuedoVariableReference =
    fail

  is-Smalltalk-BindableIdentifier =
    fail

  is-Smalltalk-UnaryMessageSelector =
    fail

  is-Smalltalk-Keyword =
    fail

  is-Smalltalk-KeywordMessageSelector =
    fail

  is-Smalltalk-BinaryMessageSelector =
    fail

  is-Smalltalk-SymbolInArrayLiteral =
    fail

  is-Smalltalk-SymbolLiteral =
    fail

  is-Smalltalk-ArrayLiteral =
    fail

  is-Smalltalk-ObjectArrayLiteral =
    fail

  is-Smalltalk-NestedObjectArrayLiteral =
    fail

  is-Smalltalk-LiteralArrayElement =
    fail

  is-Smalltalk-ByteArrayLiteral =
    fail

  is-Smalltalk-FormalBlockArgumentDeclaration =
    fail

  is-Smalltalk-FormalBlockArgumentDeclarationList =
    fail

  is-Smalltalk-FormalBlockArgumentDeclarationListWithSep =
    fail

  is-Smalltalk-BlockLiteral =
    fail

  is-Smalltalk-Literal =
    fail

  is-Smalltalk-NestedExpression =
    fail

  is-Smalltalk-Operand =
    fail

  is-Smalltalk-UnaryMessage =
    fail

  is-Smalltalk-UnaryMessageChain =
    fail

  is-Smalltalk-BinaryMessageOperand =
    fail

  is-Smalltalk-BinaryMessage =
    fail

  is-Smalltalk-BinaryMessageChain =
    fail

  is-Smalltalk-KeywordMessageArgument =
    fail

  is-Smalltalk-KeywordMessageSegment =
    fail

  is-Smalltalk-KeywordMessage =
    fail

  is-Smalltalk-MessageChain =
    fail

  is-Smalltalk-CascadedMessage =
    fail

  is-Smalltalk-Expression =
    fail

  is-Smalltalk-ExpressionRest =
    fail

  is-Smalltalk-AssignmentOperation =
    fail

  is-Smalltalk-Statement =
    fail

  is-Smalltalk-MethodReturnOperator =
    fail

  is-Smalltalk-FinalStatement =
    fail

  is-Smalltalk-LocalVariableDeclarationList =
    fail

  is-Smalltalk-ExecutableCode =
    fail

  is-Smalltalk-ExecutableCodeRest =
    fail

  is-Smalltalk-DottedStatement =
    fail

  is-Smalltalk-Dot =
    fail

  is-Smalltalk-UnaryMethodHeader =
    fail

  is-Smalltalk-BinaryMethodHeader =
    fail

  is-Smalltalk-KeywordMethodHeaderSegment =
    fail

  is-Smalltalk-KeywordMethodHeader =
    fail

  is-Smalltalk-MethodHeader =
    fail

  is-Smalltalk-MethodDeclaration =
    fail

  prettyprint-Smalltalk-Prog :
    amb([h|hs]) -> <prettyprint-Smalltalk-Prog> h

  prettyprint-Smalltalk-Start :
    amb([h|hs]) -> <prettyprint-Smalltalk-Start> h

  prettyprint-Smalltalk-Reference :
    amb([h|hs]) -> <prettyprint-Smalltalk-Reference> h

  prettyprint-Smalltalk-ConstantReference :
    amb([h|hs]) -> <prettyprint-Smalltalk-ConstantReference> h

  prettyprint-Smalltalk-PsuedoVariableReference :
    amb([h|hs]) -> <prettyprint-Smalltalk-PsuedoVariableReference> h

  prettyprint-Smalltalk-BindableIdentifier :
    amb([h|hs]) -> <prettyprint-Smalltalk-BindableIdentifier> h

  prettyprint-Smalltalk-UnaryMessageSelector :
    amb([h|hs]) -> <prettyprint-Smalltalk-UnaryMessageSelector> h

  prettyprint-Smalltalk-Keyword :
    amb([h|hs]) -> <prettyprint-Smalltalk-Keyword> h

  prettyprint-Smalltalk-KeywordMessageSelector :
    amb([h|hs]) -> <prettyprint-Smalltalk-KeywordMessageSelector> h

  prettyprint-Smalltalk-BinaryMessageSelector :
    amb([h|hs]) -> <prettyprint-Smalltalk-BinaryMessageSelector> h

  prettyprint-Smalltalk-SymbolInArrayLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-SymbolInArrayLiteral> h

  prettyprint-Smalltalk-SymbolLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-SymbolLiteral> h

  prettyprint-Smalltalk-ArrayLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-ArrayLiteral> h

  prettyprint-Smalltalk-ObjectArrayLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-ObjectArrayLiteral> h

  prettyprint-Smalltalk-NestedObjectArrayLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-NestedObjectArrayLiteral> h

  prettyprint-Smalltalk-LiteralArrayElement :
    amb([h|hs]) -> <prettyprint-Smalltalk-LiteralArrayElement> h

  prettyprint-Smalltalk-ByteArrayLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-ByteArrayLiteral> h

  prettyprint-Smalltalk-FormalBlockArgumentDeclaration :
    amb([h|hs]) -> <prettyprint-Smalltalk-FormalBlockArgumentDeclaration> h

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationList :
    amb([h|hs]) -> <prettyprint-Smalltalk-FormalBlockArgumentDeclarationList> h

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep :
    amb([h|hs]) -> <prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep> h

  prettyprint-Smalltalk-BlockLiteral :
    amb([h|hs]) -> <prettyprint-Smalltalk-BlockLiteral> h

  prettyprint-Smalltalk-Literal :
    amb([h|hs]) -> <prettyprint-Smalltalk-Literal> h

  prettyprint-Smalltalk-NestedExpression :
    amb([h|hs]) -> <prettyprint-Smalltalk-NestedExpression> h

  prettyprint-Smalltalk-Operand :
    amb([h|hs]) -> <prettyprint-Smalltalk-Operand> h

  prettyprint-Smalltalk-UnaryMessage :
    amb([h|hs]) -> <prettyprint-Smalltalk-UnaryMessage> h

  prettyprint-Smalltalk-UnaryMessageChain :
    amb([h|hs]) -> <prettyprint-Smalltalk-UnaryMessageChain> h

  prettyprint-Smalltalk-BinaryMessageOperand :
    amb([h|hs]) -> <prettyprint-Smalltalk-BinaryMessageOperand> h

  prettyprint-Smalltalk-BinaryMessage :
    amb([h|hs]) -> <prettyprint-Smalltalk-BinaryMessage> h

  prettyprint-Smalltalk-BinaryMessageChain :
    amb([h|hs]) -> <prettyprint-Smalltalk-BinaryMessageChain> h

  prettyprint-Smalltalk-KeywordMessageArgument :
    amb([h|hs]) -> <prettyprint-Smalltalk-KeywordMessageArgument> h

  prettyprint-Smalltalk-KeywordMessageSegment :
    amb([h|hs]) -> <prettyprint-Smalltalk-KeywordMessageSegment> h

  prettyprint-Smalltalk-KeywordMessage :
    amb([h|hs]) -> <prettyprint-Smalltalk-KeywordMessage> h

  prettyprint-Smalltalk-MessageChain :
    amb([h|hs]) -> <prettyprint-Smalltalk-MessageChain> h

  prettyprint-Smalltalk-CascadedMessage :
    amb([h|hs]) -> <prettyprint-Smalltalk-CascadedMessage> h

  prettyprint-Smalltalk-Expression :
    amb([h|hs]) -> <prettyprint-Smalltalk-Expression> h

  prettyprint-Smalltalk-ExpressionRest :
    amb([h|hs]) -> <prettyprint-Smalltalk-ExpressionRest> h

  prettyprint-Smalltalk-AssignmentOperation :
    amb([h|hs]) -> <prettyprint-Smalltalk-AssignmentOperation> h

  prettyprint-Smalltalk-Statement :
    amb([h|hs]) -> <prettyprint-Smalltalk-Statement> h

  prettyprint-Smalltalk-MethodReturnOperator :
    amb([h|hs]) -> <prettyprint-Smalltalk-MethodReturnOperator> h

  prettyprint-Smalltalk-FinalStatement :
    amb([h|hs]) -> <prettyprint-Smalltalk-FinalStatement> h

  prettyprint-Smalltalk-LocalVariableDeclarationList :
    amb([h|hs]) -> <prettyprint-Smalltalk-LocalVariableDeclarationList> h

  prettyprint-Smalltalk-ExecutableCode :
    amb([h|hs]) -> <prettyprint-Smalltalk-ExecutableCode> h

  prettyprint-Smalltalk-ExecutableCodeRest :
    amb([h|hs]) -> <prettyprint-Smalltalk-ExecutableCodeRest> h

  prettyprint-Smalltalk-DottedStatement :
    amb([h|hs]) -> <prettyprint-Smalltalk-DottedStatement> h

  prettyprint-Smalltalk-Dot :
    amb([h|hs]) -> <prettyprint-Smalltalk-Dot> h

  prettyprint-Smalltalk-UnaryMethodHeader :
    amb([h|hs]) -> <prettyprint-Smalltalk-UnaryMethodHeader> h

  prettyprint-Smalltalk-BinaryMethodHeader :
    amb([h|hs]) -> <prettyprint-Smalltalk-BinaryMethodHeader> h

  prettyprint-Smalltalk-KeywordMethodHeaderSegment :
    amb([h|hs]) -> <prettyprint-Smalltalk-KeywordMethodHeaderSegment> h

  prettyprint-Smalltalk-KeywordMethodHeader :
    amb([h|hs]) -> <prettyprint-Smalltalk-KeywordMethodHeader> h

  prettyprint-Smalltalk-MethodHeader :
    amb([h|hs]) -> <prettyprint-Smalltalk-MethodHeader> h

  prettyprint-Smalltalk-MethodDeclaration :
    amb([h|hs]) -> <prettyprint-Smalltalk-MethodDeclaration> h

  prettyprint-Smalltalk-Prog :
    Prog-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Prog")]
                      )
                    ]

  is-Smalltalk-Prog =
    ?Prog-Plhdr()

  prettyprint-Smalltalk-Start :
    Start-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Start")]
                       )
                     ]

  is-Smalltalk-Start =
    ?Start-Plhdr()

  prettyprint-Smalltalk-PsuedoVariableReference :
    PsuedoVariableReference-Plhdr() -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [S("$PsuedoVariableReference")]
                                         )
                                       ]

  is-Smalltalk-PsuedoVariableReference =
    ?PsuedoVariableReference-Plhdr()

  prettyprint-Smalltalk-Identifier :
    Identifier-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Identifier")]
                            )
                          ]

  is-Smalltalk-Identifier =
    ?Identifier-Plhdr()

  prettyprint-Smalltalk-BinarySelectorChar :
    BinarySelectorChar-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$BinarySelectorChar")]
                                    )
                                  ]

  is-Smalltalk-BinarySelectorChar =
    ?BinarySelectorChar-Plhdr()

  prettyprint-Smalltalk-KeywordMessageSelector :
    KeywordMessageSelector-Plhdr() -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("$KeywordMessageSelector")]
                                        )
                                      ]

  is-Smalltalk-KeywordMessageSelector =
    ?KeywordMessageSelector-Plhdr()

  prettyprint-Smalltalk-ObjectArrayLiteral :
    ObjectArrayLiteral-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$ObjectArrayLiteral")]
                                    )
                                  ]

  is-Smalltalk-ObjectArrayLiteral =
    ?ObjectArrayLiteral-Plhdr()

  prettyprint-Smalltalk-NestedObjectArrayLiteral :
    NestedObjectArrayLiteral-Plhdr() -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [S("$NestedObjectArrayLiteral")]
                                          )
                                        ]

  is-Smalltalk-NestedObjectArrayLiteral =
    ?NestedObjectArrayLiteral-Plhdr()

  prettyprint-Smalltalk-SymbolInArrayLiteral :
    SymbolInArrayLiteral-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$SymbolInArrayLiteral")]
                                      )
                                    ]

  is-Smalltalk-SymbolInArrayLiteral =
    ?SymbolInArrayLiteral-Plhdr()

  prettyprint-Smalltalk-LiteralArrayElement :
    LiteralArrayElement-Plhdr() -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$LiteralArrayElement")]
                                     )
                                   ]

  is-Smalltalk-LiteralArrayElement =
    ?LiteralArrayElement-Plhdr()

  prettyprint-Smalltalk-ByteArrayLiteral :
    ByteArrayLiteral-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$ByteArrayLiteral")]
                                  )
                                ]

  is-Smalltalk-ByteArrayLiteral =
    ?ByteArrayLiteral-Plhdr()

  prettyprint-Smalltalk-UnsignedIntegerLiteral :
    UnsignedIntegerLiteral-Plhdr() -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("$UnsignedIntegerLiteral")]
                                        )
                                      ]

  is-Smalltalk-UnsignedIntegerLiteral =
    ?UnsignedIntegerLiteral-Plhdr()

  prettyprint-Smalltalk-FormalBlockArgumentDeclaration :
    FormalBlockArgumentDeclaration-Plhdr() -> [ H(
                                                  [SOpt(HS(), "0")]
                                                , [S("$FormalBlockArgumentDeclaration")]
                                                )
                                              ]

  is-Smalltalk-FormalBlockArgumentDeclaration =
    ?FormalBlockArgumentDeclaration-Plhdr()

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationList :
    FormalBlockArgumentDeclarationList-Plhdr() -> [ H(
                                                      [SOpt(HS(), "0")]
                                                    , [S("$FormalBlockArgumentDeclarationList")]
                                                    )
                                                  ]

  is-Smalltalk-FormalBlockArgumentDeclarationList =
    ?FormalBlockArgumentDeclarationList-Plhdr()

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep :
    FormalBlockArgumentDeclarationListWithSep-Plhdr() -> [ H(
                                                             [SOpt(HS(), "0")]
                                                           , [S("$FormalBlockArgumentDeclarationListWithSep")]
                                                           )
                                                         ]

  is-Smalltalk-FormalBlockArgumentDeclarationListWithSep =
    ?FormalBlockArgumentDeclarationListWithSep-Plhdr()

  prettyprint-Smalltalk-ConstantReference :
    ConstantReference-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$ConstantReference")]
                                   )
                                 ]

  is-Smalltalk-ConstantReference =
    ?ConstantReference-Plhdr()

  prettyprint-Smalltalk-IntegerLiteral :
    IntegerLiteral-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$IntegerLiteral")]
                                )
                              ]

  is-Smalltalk-IntegerLiteral =
    ?IntegerLiteral-Plhdr()

  prettyprint-Smalltalk-ScaledDecimalLiteral :
    ScaledDecimalLiteral-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$ScaledDecimalLiteral")]
                                      )
                                    ]

  is-Smalltalk-ScaledDecimalLiteral =
    ?ScaledDecimalLiteral-Plhdr()

  prettyprint-Smalltalk-FloatingPointLiteral :
    FloatingPointLiteral-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$FloatingPointLiteral")]
                                      )
                                    ]

  is-Smalltalk-FloatingPointLiteral =
    ?FloatingPointLiteral-Plhdr()

  prettyprint-Smalltalk-CharacterLiteral :
    CharacterLiteral-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$CharacterLiteral")]
                                  )
                                ]

  is-Smalltalk-CharacterLiteral =
    ?CharacterLiteral-Plhdr()

  prettyprint-Smalltalk-StringLiteral :
    StringLiteral-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$StringLiteral")]
                               )
                             ]

  is-Smalltalk-StringLiteral =
    ?StringLiteral-Plhdr()

  prettyprint-Smalltalk-SymbolLiteral :
    SymbolLiteral-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$SymbolLiteral")]
                               )
                             ]

  is-Smalltalk-SymbolLiteral =
    ?SymbolLiteral-Plhdr()

  prettyprint-Smalltalk-ArrayLiteral :
    ArrayLiteral-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$ArrayLiteral")]
                              )
                            ]

  is-Smalltalk-ArrayLiteral =
    ?ArrayLiteral-Plhdr()

  prettyprint-Smalltalk-BlockLiteral :
    BlockLiteral-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$BlockLiteral")]
                              )
                            ]

  is-Smalltalk-BlockLiteral =
    ?BlockLiteral-Plhdr()

  prettyprint-Smalltalk-Literal :
    Literal-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Literal")]
                         )
                       ]

  is-Smalltalk-Literal =
    ?Literal-Plhdr()

  prettyprint-Smalltalk-Reference :
    Reference-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Reference")]
                           )
                         ]

  is-Smalltalk-Reference =
    ?Reference-Plhdr()

  prettyprint-Smalltalk-NestedExpression :
    NestedExpression-Plhdr() -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$NestedExpression")]
                                  )
                                ]

  is-Smalltalk-NestedExpression =
    ?NestedExpression-Plhdr()

  prettyprint-Smalltalk-BinaryMessageOperand :
    BinaryMessageOperand-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$BinaryMessageOperand")]
                                      )
                                    ]

  is-Smalltalk-BinaryMessageOperand =
    ?BinaryMessageOperand-Plhdr()

  prettyprint-Smalltalk-KeywordMessageArgument :
    KeywordMessageArgument-Plhdr() -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("$KeywordMessageArgument")]
                                        )
                                      ]

  is-Smalltalk-KeywordMessageArgument =
    ?KeywordMessageArgument-Plhdr()

  prettyprint-Smalltalk-KeywordMessageSegment :
    KeywordMessageSegment-Plhdr() -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$KeywordMessageSegment")]
                                       )
                                     ]

  is-Smalltalk-KeywordMessageSegment =
    ?KeywordMessageSegment-Plhdr()

  prettyprint-Smalltalk-BinaryMessage :
    BinaryMessage-Plhdr() -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$BinaryMessage")]
                               )
                             ]

  is-Smalltalk-BinaryMessage =
    ?BinaryMessage-Plhdr()

  prettyprint-Smalltalk-UnaryMessage :
    UnaryMessage-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$UnaryMessage")]
                              )
                            ]

  is-Smalltalk-UnaryMessage =
    ?UnaryMessage-Plhdr()

  prettyprint-Smalltalk-UnaryMessageChain :
    UnaryMessageChain-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$UnaryMessageChain")]
                                   )
                                 ]

  is-Smalltalk-UnaryMessageChain =
    ?UnaryMessageChain-Plhdr()

  prettyprint-Smalltalk-BinaryMessageChain :
    BinaryMessageChain-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$BinaryMessageChain")]
                                    )
                                  ]

  is-Smalltalk-BinaryMessageChain =
    ?BinaryMessageChain-Plhdr()

  prettyprint-Smalltalk-KeywordMessage :
    KeywordMessage-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$KeywordMessage")]
                                )
                              ]

  is-Smalltalk-KeywordMessage =
    ?KeywordMessage-Plhdr()

  prettyprint-Smalltalk-Operand :
    Operand-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Operand")]
                         )
                       ]

  is-Smalltalk-Operand =
    ?Operand-Plhdr()

  prettyprint-Smalltalk-ExpressionRest :
    ExpressionRest-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$ExpressionRest")]
                                )
                              ]

  is-Smalltalk-ExpressionRest =
    ?ExpressionRest-Plhdr()

  prettyprint-Smalltalk-MessageChain :
    MessageChain-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$MessageChain")]
                              )
                            ]

  is-Smalltalk-MessageChain =
    ?MessageChain-Plhdr()

  prettyprint-Smalltalk-CascadedMessage :
    CascadedMessage-Plhdr() -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$CascadedMessage")]
                                 )
                               ]

  is-Smalltalk-CascadedMessage =
    ?CascadedMessage-Plhdr()

  prettyprint-Smalltalk-AssignmentOperation :
    AssignmentOperation-Plhdr() -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$AssignmentOperation")]
                                     )
                                   ]

  is-Smalltalk-AssignmentOperation =
    ?AssignmentOperation-Plhdr()

  prettyprint-Smalltalk-Expression :
    Expression-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Expression")]
                            )
                          ]

  is-Smalltalk-Expression =
    ?Expression-Plhdr()

  prettyprint-Smalltalk-MethodReturnOperator :
    MethodReturnOperator-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$MethodReturnOperator")]
                                      )
                                    ]

  is-Smalltalk-MethodReturnOperator =
    ?MethodReturnOperator-Plhdr()

  prettyprint-Smalltalk-LocalVariableDeclarationList :
    LocalVariableDeclarationList-Plhdr() -> [ H(
                                                [SOpt(HS(), "0")]
                                              , [S("$LocalVariableDeclarationList")]
                                              )
                                            ]

  is-Smalltalk-LocalVariableDeclarationList =
    ?LocalVariableDeclarationList-Plhdr()

  prettyprint-Smalltalk-ExecutableCodeRest :
    ExecutableCodeRest-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$ExecutableCodeRest")]
                                    )
                                  ]

  is-Smalltalk-ExecutableCodeRest =
    ?ExecutableCodeRest-Plhdr()

  prettyprint-Smalltalk-FinalStatement :
    FinalStatement-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$FinalStatement")]
                                )
                              ]

  is-Smalltalk-FinalStatement =
    ?FinalStatement-Plhdr()

  prettyprint-Smalltalk-DottedStatement :
    DottedStatement-Plhdr() -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$DottedStatement")]
                                 )
                               ]

  is-Smalltalk-DottedStatement =
    ?DottedStatement-Plhdr()

  prettyprint-Smalltalk-Statement :
    Statement-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("$Statement")]
                           )
                         ]

  is-Smalltalk-Statement =
    ?Statement-Plhdr()

  prettyprint-Smalltalk-Dot :
    Dot-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("$Dot")]
                     )
                   ]

  is-Smalltalk-Dot =
    ?Dot-Plhdr()

  prettyprint-Smalltalk-UnaryMessageSelector :
    UnaryMessageSelector-Plhdr() -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$UnaryMessageSelector")]
                                      )
                                    ]

  is-Smalltalk-UnaryMessageSelector =
    ?UnaryMessageSelector-Plhdr()

  prettyprint-Smalltalk-BinaryMessageSelector :
    BinaryMessageSelector-Plhdr() -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$BinaryMessageSelector")]
                                       )
                                     ]

  is-Smalltalk-BinaryMessageSelector =
    ?BinaryMessageSelector-Plhdr()

  prettyprint-Smalltalk-Keyword :
    Keyword-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("$Keyword")]
                         )
                       ]

  is-Smalltalk-Keyword =
    ?Keyword-Plhdr()

  prettyprint-Smalltalk-BindableIdentifier :
    BindableIdentifier-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$BindableIdentifier")]
                                    )
                                  ]

  is-Smalltalk-BindableIdentifier =
    ?BindableIdentifier-Plhdr()

  prettyprint-Smalltalk-KeywordMethodHeaderSegment :
    KeywordMethodHeaderSegment-Plhdr() -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [S("$KeywordMethodHeaderSegment")]
                                            )
                                          ]

  is-Smalltalk-KeywordMethodHeaderSegment =
    ?KeywordMethodHeaderSegment-Plhdr()

  prettyprint-Smalltalk-UnaryMethodHeader :
    UnaryMethodHeader-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$UnaryMethodHeader")]
                                   )
                                 ]

  is-Smalltalk-UnaryMethodHeader =
    ?UnaryMethodHeader-Plhdr()

  prettyprint-Smalltalk-BinaryMethodHeader :
    BinaryMethodHeader-Plhdr() -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$BinaryMethodHeader")]
                                    )
                                  ]

  is-Smalltalk-BinaryMethodHeader =
    ?BinaryMethodHeader-Plhdr()

  prettyprint-Smalltalk-KeywordMethodHeader :
    KeywordMethodHeader-Plhdr() -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$KeywordMethodHeader")]
                                     )
                                   ]

  is-Smalltalk-KeywordMethodHeader =
    ?KeywordMethodHeader-Plhdr()

  prettyprint-Smalltalk-MethodDeclaration :
    MethodDeclaration-Plhdr() -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$MethodDeclaration")]
                                   )
                                 ]

  is-Smalltalk-MethodDeclaration =
    ?MethodDeclaration-Plhdr()

  prettyprint-Smalltalk-MethodHeader :
    MethodHeader-Plhdr() -> [ H(
                                [SOpt(HS(), "0")]
                              , [S("$MethodHeader")]
                              )
                            ]

  is-Smalltalk-MethodHeader =
    ?MethodHeader-Plhdr()

  prettyprint-Smalltalk-ExecutableCode :
    ExecutableCode-Plhdr() -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$ExecutableCode")]
                                )
                              ]

  is-Smalltalk-ExecutableCode =
    ?ExecutableCode-Plhdr()

  prettyprint-Smalltalk-Prog :
    Prog-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("$Prog")]
                       )
                     ]

  is-Smalltalk-Prog =
    ?Prog-Plhdr(_)

  prettyprint-Smalltalk-Start :
    Start-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("$Start")]
                        )
                      ]

  is-Smalltalk-Start =
    ?Start-Plhdr(_)

  prettyprint-Smalltalk-PsuedoVariableReference :
    PsuedoVariableReference-Plhdr(_) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [S("$PsuedoVariableReference")]
                                          )
                                        ]

  is-Smalltalk-PsuedoVariableReference =
    ?PsuedoVariableReference-Plhdr(_)

  prettyprint-Smalltalk-Identifier :
    Identifier-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Identifier")]
                             )
                           ]

  is-Smalltalk-Identifier =
    ?Identifier-Plhdr(_)

  prettyprint-Smalltalk-BinarySelectorChar :
    BinarySelectorChar-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$BinarySelectorChar")]
                                     )
                                   ]

  is-Smalltalk-BinarySelectorChar =
    ?BinarySelectorChar-Plhdr(_)

  prettyprint-Smalltalk-KeywordMessageSelector :
    KeywordMessageSelector-Plhdr(_) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [S("$KeywordMessageSelector")]
                                         )
                                       ]

  is-Smalltalk-KeywordMessageSelector =
    ?KeywordMessageSelector-Plhdr(_)

  prettyprint-Smalltalk-ObjectArrayLiteral :
    ObjectArrayLiteral-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$ObjectArrayLiteral")]
                                     )
                                   ]

  is-Smalltalk-ObjectArrayLiteral =
    ?ObjectArrayLiteral-Plhdr(_)

  prettyprint-Smalltalk-NestedObjectArrayLiteral :
    NestedObjectArrayLiteral-Plhdr(_) -> [ H(
                                             [SOpt(HS(), "0")]
                                           , [S("$NestedObjectArrayLiteral")]
                                           )
                                         ]

  is-Smalltalk-NestedObjectArrayLiteral =
    ?NestedObjectArrayLiteral-Plhdr(_)

  prettyprint-Smalltalk-SymbolInArrayLiteral :
    SymbolInArrayLiteral-Plhdr(_) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$SymbolInArrayLiteral")]
                                       )
                                     ]

  is-Smalltalk-SymbolInArrayLiteral =
    ?SymbolInArrayLiteral-Plhdr(_)

  prettyprint-Smalltalk-LiteralArrayElement :
    LiteralArrayElement-Plhdr(_) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$LiteralArrayElement")]
                                      )
                                    ]

  is-Smalltalk-LiteralArrayElement =
    ?LiteralArrayElement-Plhdr(_)

  prettyprint-Smalltalk-ByteArrayLiteral :
    ByteArrayLiteral-Plhdr(_) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$ByteArrayLiteral")]
                                   )
                                 ]

  is-Smalltalk-ByteArrayLiteral =
    ?ByteArrayLiteral-Plhdr(_)

  prettyprint-Smalltalk-UnsignedIntegerLiteral :
    UnsignedIntegerLiteral-Plhdr(_) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [S("$UnsignedIntegerLiteral")]
                                         )
                                       ]

  is-Smalltalk-UnsignedIntegerLiteral =
    ?UnsignedIntegerLiteral-Plhdr(_)

  prettyprint-Smalltalk-FormalBlockArgumentDeclaration :
    FormalBlockArgumentDeclaration-Plhdr(_) -> [ H(
                                                   [SOpt(HS(), "0")]
                                                 , [S("$FormalBlockArgumentDeclaration")]
                                                 )
                                               ]

  is-Smalltalk-FormalBlockArgumentDeclaration =
    ?FormalBlockArgumentDeclaration-Plhdr(_)

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationList :
    FormalBlockArgumentDeclarationList-Plhdr(_) -> [ H(
                                                       [SOpt(HS(), "0")]
                                                     , [S("$FormalBlockArgumentDeclarationList")]
                                                     )
                                                   ]

  is-Smalltalk-FormalBlockArgumentDeclarationList =
    ?FormalBlockArgumentDeclarationList-Plhdr(_)

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep :
    FormalBlockArgumentDeclarationListWithSep-Plhdr(_) -> [ H(
                                                              [SOpt(HS(), "0")]
                                                            , [S("$FormalBlockArgumentDeclarationListWithSep")]
                                                            )
                                                          ]

  is-Smalltalk-FormalBlockArgumentDeclarationListWithSep =
    ?FormalBlockArgumentDeclarationListWithSep-Plhdr(_)

  prettyprint-Smalltalk-ConstantReference :
    ConstantReference-Plhdr(_) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$ConstantReference")]
                                    )
                                  ]

  is-Smalltalk-ConstantReference =
    ?ConstantReference-Plhdr(_)

  prettyprint-Smalltalk-IntegerLiteral :
    IntegerLiteral-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$IntegerLiteral")]
                                 )
                               ]

  is-Smalltalk-IntegerLiteral =
    ?IntegerLiteral-Plhdr(_)

  prettyprint-Smalltalk-ScaledDecimalLiteral :
    ScaledDecimalLiteral-Plhdr(_) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$ScaledDecimalLiteral")]
                                       )
                                     ]

  is-Smalltalk-ScaledDecimalLiteral =
    ?ScaledDecimalLiteral-Plhdr(_)

  prettyprint-Smalltalk-FloatingPointLiteral :
    FloatingPointLiteral-Plhdr(_) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$FloatingPointLiteral")]
                                       )
                                     ]

  is-Smalltalk-FloatingPointLiteral =
    ?FloatingPointLiteral-Plhdr(_)

  prettyprint-Smalltalk-CharacterLiteral :
    CharacterLiteral-Plhdr(_) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$CharacterLiteral")]
                                   )
                                 ]

  is-Smalltalk-CharacterLiteral =
    ?CharacterLiteral-Plhdr(_)

  prettyprint-Smalltalk-StringLiteral :
    StringLiteral-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$StringLiteral")]
                                )
                              ]

  is-Smalltalk-StringLiteral =
    ?StringLiteral-Plhdr(_)

  prettyprint-Smalltalk-SymbolLiteral :
    SymbolLiteral-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$SymbolLiteral")]
                                )
                              ]

  is-Smalltalk-SymbolLiteral =
    ?SymbolLiteral-Plhdr(_)

  prettyprint-Smalltalk-ArrayLiteral :
    ArrayLiteral-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$ArrayLiteral")]
                               )
                             ]

  is-Smalltalk-ArrayLiteral =
    ?ArrayLiteral-Plhdr(_)

  prettyprint-Smalltalk-BlockLiteral :
    BlockLiteral-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$BlockLiteral")]
                               )
                             ]

  is-Smalltalk-BlockLiteral =
    ?BlockLiteral-Plhdr(_)

  prettyprint-Smalltalk-Literal :
    Literal-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Literal")]
                          )
                        ]

  is-Smalltalk-Literal =
    ?Literal-Plhdr(_)

  prettyprint-Smalltalk-Reference :
    Reference-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Reference")]
                            )
                          ]

  is-Smalltalk-Reference =
    ?Reference-Plhdr(_)

  prettyprint-Smalltalk-NestedExpression :
    NestedExpression-Plhdr(_) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S("$NestedExpression")]
                                   )
                                 ]

  is-Smalltalk-NestedExpression =
    ?NestedExpression-Plhdr(_)

  prettyprint-Smalltalk-BinaryMessageOperand :
    BinaryMessageOperand-Plhdr(_) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$BinaryMessageOperand")]
                                       )
                                     ]

  is-Smalltalk-BinaryMessageOperand =
    ?BinaryMessageOperand-Plhdr(_)

  prettyprint-Smalltalk-KeywordMessageArgument :
    KeywordMessageArgument-Plhdr(_) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [S("$KeywordMessageArgument")]
                                         )
                                       ]

  is-Smalltalk-KeywordMessageArgument =
    ?KeywordMessageArgument-Plhdr(_)

  prettyprint-Smalltalk-KeywordMessageSegment :
    KeywordMessageSegment-Plhdr(_) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("$KeywordMessageSegment")]
                                        )
                                      ]

  is-Smalltalk-KeywordMessageSegment =
    ?KeywordMessageSegment-Plhdr(_)

  prettyprint-Smalltalk-BinaryMessage :
    BinaryMessage-Plhdr(_) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("$BinaryMessage")]
                                )
                              ]

  is-Smalltalk-BinaryMessage =
    ?BinaryMessage-Plhdr(_)

  prettyprint-Smalltalk-UnaryMessage :
    UnaryMessage-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$UnaryMessage")]
                               )
                             ]

  is-Smalltalk-UnaryMessage =
    ?UnaryMessage-Plhdr(_)

  prettyprint-Smalltalk-UnaryMessageChain :
    UnaryMessageChain-Plhdr(_) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$UnaryMessageChain")]
                                    )
                                  ]

  is-Smalltalk-UnaryMessageChain =
    ?UnaryMessageChain-Plhdr(_)

  prettyprint-Smalltalk-BinaryMessageChain :
    BinaryMessageChain-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$BinaryMessageChain")]
                                     )
                                   ]

  is-Smalltalk-BinaryMessageChain =
    ?BinaryMessageChain-Plhdr(_)

  prettyprint-Smalltalk-KeywordMessage :
    KeywordMessage-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$KeywordMessage")]
                                 )
                               ]

  is-Smalltalk-KeywordMessage =
    ?KeywordMessage-Plhdr(_)

  prettyprint-Smalltalk-Operand :
    Operand-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Operand")]
                          )
                        ]

  is-Smalltalk-Operand =
    ?Operand-Plhdr(_)

  prettyprint-Smalltalk-ExpressionRest :
    ExpressionRest-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$ExpressionRest")]
                                 )
                               ]

  is-Smalltalk-ExpressionRest =
    ?ExpressionRest-Plhdr(_)

  prettyprint-Smalltalk-MessageChain :
    MessageChain-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$MessageChain")]
                               )
                             ]

  is-Smalltalk-MessageChain =
    ?MessageChain-Plhdr(_)

  prettyprint-Smalltalk-CascadedMessage :
    CascadedMessage-Plhdr(_) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$CascadedMessage")]
                                  )
                                ]

  is-Smalltalk-CascadedMessage =
    ?CascadedMessage-Plhdr(_)

  prettyprint-Smalltalk-AssignmentOperation :
    AssignmentOperation-Plhdr(_) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$AssignmentOperation")]
                                      )
                                    ]

  is-Smalltalk-AssignmentOperation =
    ?AssignmentOperation-Plhdr(_)

  prettyprint-Smalltalk-Expression :
    Expression-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("$Expression")]
                             )
                           ]

  is-Smalltalk-Expression =
    ?Expression-Plhdr(_)

  prettyprint-Smalltalk-MethodReturnOperator :
    MethodReturnOperator-Plhdr(_) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$MethodReturnOperator")]
                                       )
                                     ]

  is-Smalltalk-MethodReturnOperator =
    ?MethodReturnOperator-Plhdr(_)

  prettyprint-Smalltalk-LocalVariableDeclarationList :
    LocalVariableDeclarationList-Plhdr(_) -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [S("$LocalVariableDeclarationList")]
                                               )
                                             ]

  is-Smalltalk-LocalVariableDeclarationList =
    ?LocalVariableDeclarationList-Plhdr(_)

  prettyprint-Smalltalk-ExecutableCodeRest :
    ExecutableCodeRest-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$ExecutableCodeRest")]
                                     )
                                   ]

  is-Smalltalk-ExecutableCodeRest =
    ?ExecutableCodeRest-Plhdr(_)

  prettyprint-Smalltalk-FinalStatement :
    FinalStatement-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$FinalStatement")]
                                 )
                               ]

  is-Smalltalk-FinalStatement =
    ?FinalStatement-Plhdr(_)

  prettyprint-Smalltalk-DottedStatement :
    DottedStatement-Plhdr(_) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [S("$DottedStatement")]
                                  )
                                ]

  is-Smalltalk-DottedStatement =
    ?DottedStatement-Plhdr(_)

  prettyprint-Smalltalk-Statement :
    Statement-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("$Statement")]
                            )
                          ]

  is-Smalltalk-Statement =
    ?Statement-Plhdr(_)

  prettyprint-Smalltalk-Dot :
    Dot-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("$Dot")]
                      )
                    ]

  is-Smalltalk-Dot =
    ?Dot-Plhdr(_)

  prettyprint-Smalltalk-UnaryMessageSelector :
    UnaryMessageSelector-Plhdr(_) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S("$UnaryMessageSelector")]
                                       )
                                     ]

  is-Smalltalk-UnaryMessageSelector =
    ?UnaryMessageSelector-Plhdr(_)

  prettyprint-Smalltalk-BinaryMessageSelector :
    BinaryMessageSelector-Plhdr(_) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [S("$BinaryMessageSelector")]
                                        )
                                      ]

  is-Smalltalk-BinaryMessageSelector =
    ?BinaryMessageSelector-Plhdr(_)

  prettyprint-Smalltalk-Keyword :
    Keyword-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("$Keyword")]
                          )
                        ]

  is-Smalltalk-Keyword =
    ?Keyword-Plhdr(_)

  prettyprint-Smalltalk-BindableIdentifier :
    BindableIdentifier-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$BindableIdentifier")]
                                     )
                                   ]

  is-Smalltalk-BindableIdentifier =
    ?BindableIdentifier-Plhdr(_)

  prettyprint-Smalltalk-KeywordMethodHeaderSegment :
    KeywordMethodHeaderSegment-Plhdr(_) -> [ H(
                                               [SOpt(HS(), "0")]
                                             , [S("$KeywordMethodHeaderSegment")]
                                             )
                                           ]

  is-Smalltalk-KeywordMethodHeaderSegment =
    ?KeywordMethodHeaderSegment-Plhdr(_)

  prettyprint-Smalltalk-UnaryMethodHeader :
    UnaryMethodHeader-Plhdr(_) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$UnaryMethodHeader")]
                                    )
                                  ]

  is-Smalltalk-UnaryMethodHeader =
    ?UnaryMethodHeader-Plhdr(_)

  prettyprint-Smalltalk-BinaryMethodHeader :
    BinaryMethodHeader-Plhdr(_) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [S("$BinaryMethodHeader")]
                                     )
                                   ]

  is-Smalltalk-BinaryMethodHeader =
    ?BinaryMethodHeader-Plhdr(_)

  prettyprint-Smalltalk-KeywordMethodHeader :
    KeywordMethodHeader-Plhdr(_) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S("$KeywordMethodHeader")]
                                      )
                                    ]

  is-Smalltalk-KeywordMethodHeader =
    ?KeywordMethodHeader-Plhdr(_)

  prettyprint-Smalltalk-MethodDeclaration :
    MethodDeclaration-Plhdr(_) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("$MethodDeclaration")]
                                    )
                                  ]

  is-Smalltalk-MethodDeclaration =
    ?MethodDeclaration-Plhdr(_)

  prettyprint-Smalltalk-MethodHeader :
    MethodHeader-Plhdr(_) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [S("$MethodHeader")]
                               )
                             ]

  is-Smalltalk-MethodHeader =
    ?MethodHeader-Plhdr(_)

  prettyprint-Smalltalk-ExecutableCode :
    ExecutableCode-Plhdr(_) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [S("$ExecutableCode")]
                                 )
                               ]

  is-Smalltalk-ExecutableCode =
    ?ExecutableCode-Plhdr(_)

  prettyprint-Smalltalk-LiteralArrayElement :
    LiteralArrayElement-Opt-Plhdr() -> [ H(
                                           []
                                         , [S("")]
                                         )
                                       ]

  is-Smalltalk-LiteralArrayElement =
    ?LiteralArrayElement-Opt-Plhdr()

  prettyprint-Smalltalk-UnsignedIntegerLiteral :
    UnsignedIntegerLiteral-Opt-Plhdr() -> [ H(
                                              []
                                            , [S("")]
                                            )
                                          ]

  is-Smalltalk-UnsignedIntegerLiteral =
    ?UnsignedIntegerLiteral-Opt-Plhdr()

  prettyprint-Smalltalk-FormalBlockArgumentDeclarationListWithSep :
    FormalBlockArgumentDeclarationListWithSep-Opt-Plhdr() -> [ H(
                                                                 []
                                                               , [S("")]
                                                               )
                                                             ]

  is-Smalltalk-FormalBlockArgumentDeclarationListWithSep =
    ?FormalBlockArgumentDeclarationListWithSep-Opt-Plhdr()

  prettyprint-Smalltalk-UnaryMessage :
    UnaryMessage-Opt-Plhdr() -> [ H(
                                    []
                                  , [S("")]
                                  )
                                ]

  is-Smalltalk-UnaryMessage =
    ?UnaryMessage-Opt-Plhdr()

  prettyprint-Smalltalk-BinaryMessage :
    BinaryMessage-Opt-Plhdr() -> [ H(
                                     []
                                   , [S("")]
                                   )
                                 ]

  is-Smalltalk-BinaryMessage =
    ?BinaryMessage-Opt-Plhdr()

  prettyprint-Smalltalk-KeywordMessageSegment :
    KeywordMessageSegment-Opt-Plhdr() -> [ H(
                                             []
                                           , [S("")]
                                           )
                                         ]

  is-Smalltalk-KeywordMessageSegment =
    ?KeywordMessageSegment-Opt-Plhdr()

  prettyprint-Smalltalk-KeywordMessage :
    KeywordMessage-Opt-Plhdr() -> [ H(
                                      []
                                    , [S("")]
                                    )
                                  ]

  is-Smalltalk-KeywordMessage =
    ?KeywordMessage-Opt-Plhdr()

  prettyprint-Smalltalk-ExpressionRest :
    ExpressionRest-Opt-Plhdr() -> [ H(
                                      []
                                    , [S("")]
                                    )
                                  ]

  is-Smalltalk-ExpressionRest =
    ?ExpressionRest-Opt-Plhdr()

  prettyprint-Smalltalk-CascadedMessage :
    CascadedMessage-Opt-Plhdr() -> [ H(
                                       []
                                     , [S("")]
                                     )
                                   ]

  is-Smalltalk-CascadedMessage =
    ?CascadedMessage-Opt-Plhdr()

  prettyprint-Smalltalk-AssignmentOperation :
    AssignmentOperation-Opt-Plhdr() -> [ H(
                                           []
                                         , [S("")]
                                         )
                                       ]

  is-Smalltalk-AssignmentOperation =
    ?AssignmentOperation-Opt-Plhdr()

  prettyprint-Smalltalk-MethodReturnOperator :
    MethodReturnOperator-Opt-Plhdr() -> [ H(
                                            []
                                          , [S("")]
                                          )
                                        ]

  is-Smalltalk-MethodReturnOperator =
    ?MethodReturnOperator-Opt-Plhdr()

  prettyprint-Smalltalk-BindableIdentifier :
    BindableIdentifier-Opt-Plhdr() -> [ H(
                                          []
                                        , [S("")]
                                        )
                                      ]

  is-Smalltalk-BindableIdentifier =
    ?BindableIdentifier-Opt-Plhdr()

  prettyprint-Smalltalk-LocalVariableDeclarationList :
    LocalVariableDeclarationList-Opt-Plhdr() -> [ H(
                                                    []
                                                  , [S("")]
                                                  )
                                                ]

  is-Smalltalk-LocalVariableDeclarationList =
    ?LocalVariableDeclarationList-Opt-Plhdr()

  prettyprint-Smalltalk-ExecutableCodeRest :
    ExecutableCodeRest-Opt-Plhdr() -> [ H(
                                          []
                                        , [S("")]
                                        )
                                      ]

  is-Smalltalk-ExecutableCodeRest =
    ?ExecutableCodeRest-Opt-Plhdr()

  prettyprint-Smalltalk-DottedStatement :
    DottedStatement-Opt-Plhdr() -> [ H(
                                       []
                                     , [S("")]
                                     )
                                   ]

  is-Smalltalk-DottedStatement =
    ?DottedStatement-Opt-Plhdr()

  prettyprint-Smalltalk-Dot :
    Dot-Opt-Plhdr() -> [ H(
                           []
                         , [S("")]
                         )
                       ]

  is-Smalltalk-Dot =
    ?Dot-Opt-Plhdr()