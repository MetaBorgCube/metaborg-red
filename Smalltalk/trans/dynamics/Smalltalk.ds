module trans/dynamics/Smalltalk

imports 
src-gen/ds-signatures/Smalltalk-sig
src-gen/ds-signatures/Base-sig
trans/runtime/values
trans/runtime/store

//trans/dynamics/ExecutableCode
trans/dynamics/Objects
trans/dynamics/Methods

signature
  arrows
    Prog -init-> V
    Start --> V
    ProgramSegment --> V
    
    ProgramSegmentExecutor(List(ProgramSegment)) --> V
    
rules      
	
	Program(progSegments) -init-> v
	where
		initObjectSystem() :: S {}, H {} --> _ :: S1, H1 ;
		readVar("Object") :: S1, H1 --> addr :: S _, H _;
		printV(addr) => _;
		read(addr) :: S1, H1 --> cls :: S _, H _;
		printV(ObjectV(cls)) => _;
		progSegments :: S1, H1 --> v :: S _, H _;
		printV(StringV("final result")) => _;
		printV(v) => _.
		
	ProgramSegments(segments) --> ProgramSegmentExecutor(segments).
		
	ProgramSegmentExecutor([]) :: S, H --> NilV() :: S, H.
	ProgramSegmentExecutor([seg]) :: S, H --> v :: S S1, H H1
	where
		printV(StringV("last segment")) => _;
		seg :: S, H --> v :: S1, H1.
	ProgramSegmentExecutor([seg | tail]) :: S, H --> v :: S S2, H H2
	where
		tail != [] : List(ProgramSegment);
		printV(StringV("segment executed")) => _;
		seg :: S, H --> _ :: S1, H1;
		ProgramSegments(tail) :: S1, H1 --> v :: S2, H2.
	
	ExecutableCode(code) --> codeRed
	where
		code --> codeRed.
	MethodDeclaration(ref, decl) :: S, H --> refv :: S S1, H H1
	where
		simplifyMethod(decl) --> method;
		ref --> refv;
		addMethod(refv, method) :: S, H --> _ :: S S1, H H1.
	ClassMethodDeclaration(ref, decl) :: S, H --> refv :: S S1, H H1
	where
		simplifyMethod(decl) --> method;
		ref --> refv;
		addClassMethod(refv, method) :: S, H --> _ :: S S1, H H1.