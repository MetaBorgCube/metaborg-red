module Smalltalk

imports
  
	Base

context-free start-symbols
  
	Prog

context-free syntax
  
  	Prog.Program = Start
	Start.MethodDeclaration = MethodDeclaration
	Start.ExecutableCode = ExecutableCodeRest
//	Start.Start = Expression
	Start.Empty = <>
	
	Reference.ReferenceID = Identifier
	
	ConstantReference.Null = <nil>
	ConstantReference.False = <false>
	ConstantReference.True = <true>
	
	PsuedoVariableReference.Self = <self>
	PsuedoVariableReference.Super = <super>
	PsuedoVariableReference.This = <thisContext>
	
	BindableIdentifier.BindableIdentifier = Identifier
	BindableIdentifier = ConstantReference {reject}
	BindableIdentifier = PsuedoVariableReference {reject}

	UnaryMessageSelector.UnaryMessageSelector = Identifier  //duplicate constructor, can combine?
	Keyword.Keyword = <<Identifier> :>
	KeywordMessageSelector.KeywordMessageSelector = Keyword+  //duplicate, can combine?
		
	
	SymbolInArrayLiteral = UnaryMessageSelector
	SymbolInArrayLiteral = ConstantReference {reject} //duplicate, can combine?
	SymbolInArrayLiteral = KeywordMessageSelector
	SymbolInArrayLiteral = BinarySelectorChar
	
	SymbolLiteral = <# <SymbolInArrayLiteral>>  
	SymbolLiteral = <# <ConstantReference>> 
	SymbolLiteral = <# <StringLiteral>> 
	ArrayLiteral.ObjectAL = ObjectArrayLiteral 
	ArrayLiteral.ByteArrayAL = <#[ <{UnsignedIntegerLiteral ""}*> ]>
	ObjectArrayLiteral.ObjectArrayLiteral = <# <NestedObjectArrayLiteral>>
	NestedObjectArrayLiteral.NestedObjectArrayLiteral = <( <LiteralArrayElement*> )> 
	LiteralArrayElement = Literal 
	LiteralArrayElement = BlockLiteral {reject}
	LiteralArrayElement = NestedObjectArrayLiteral
	LiteralArrayElement = SymbolInArrayLiteral
	LiteralArrayElement = ConstantReference
	
	FormalBlockArgumentDeclaration.FormalBlockArgumentDeclaration = <: <BindableIdentifier>>
	FormalBlockArgumentDeclarationList.FormalBlockArgumentDeclarationList = <<FormalBlockArgumentDeclaration+> |>
	BlockLiteral.BlockLiteralWithArgs = <[ <FormalBlockArgumentDeclarationList> <ExecutableCode> ]>
	BlockLiteral.BlockLiteral = <[ <ExecutableCode> ]>
	
	Literal.ConstantReference = ConstantReference
	Literal.IntegerLiteral = IntegerLiteral 
	Literal.ScaledDecimalLiteral = ScaledDecimalLiteral 
	Literal.FloatingPointLiteral = FloatingPointLiteral 
	Literal.CharacterLiteral = CharacterLiteral 
	Literal.StringLiteral = StringLiteral 
	Literal = SymbolLiteral 
	Literal = ArrayLiteral 
	Literal = BlockLiteral
	
	Operand.Literal = Literal
	Operand.ReferenceOperand = Reference
	Operand = <( <Statement> )> 
	
	UnaryMessage.UnaryMessage = UnaryMessageSelector
	UnaryMessageChain.UnaryMessageChain = UnaryMessage*
	
	BinaryMessageOperand.BinaryMessageOperand = <<Operand> <UnaryMessageChain>>
	BinaryMessage.BinaryMessage = <<BinarySelectorChar> <BinaryMessageOperand>> 
	
	KeywordMessageArgument.KeywordMessageArgument = <<BinaryMessageOperand> <BinaryMessage*>>
	KeywordMessageSegment.KeywordMessageSegment = <<Keyword> <KeywordMessageArgument>>
	KeywordMessage.KeywordMessage = <<KeywordMessageSegment> <KeywordMessageSegment*>>
	
	MessageChain.KeywordMessageChain = KeywordMessage
	MessageChain.BinaryMessageChain = BinaryMessage+
	MessageChain.UnaryMessageChain = <<UnaryMessage+> <BinaryMessage*>>
	MessageChain.BinaryMessageChainWithKeyword = <<BinaryMessage+> <KeywordMessage>>
	MessageChain.UnaryMessageChainWithKeyword = <<UnaryMessage+> <BinaryMessage*> <KeywordMessage>>
		
	CascadedMessage.CascadedMessage = <; <MessageChain>>
	
	Expression.SingletonExpression = Operand
	Expression.Expression = <<Operand> <MessageChain> <CascadedMessage*>>
	
	AssignmentOperation.AssignmentOperation = <<BindableIdentifier> :=>
	Statement.Statement = <<AssignmentOperation*> <Expression>>
	FinalStatement.FinalStatement = <^ <Statement>>
	FinalStatement.FinalStatement = Statement
	
	LocalVariableDeclarationList.LocalVariableDeclarationList = <| <BindableIdentifier*> |>
	ExecutableCode.ExecutableCodeVarsOnly = LocalVariableDeclarationList
	ExecutableCode.ExecutableCodeStmtsOnly = ExecutableCodeRest
	ExecutableCode.ExecutableCodeEmpty = <>
	ExecutableCode.ExecutableCodeVarsNStmts = <<LocalVariableDeclarationList> <ExecutableCodeRest>>
	
	ExecutableCodeRest.ExecutableCodeRest = <<DottedStatement*> <FinalStatement> .>
	ExecutableCodeRest.ExecutableCodeRest = <<DottedStatement*> <FinalStatement>>
	DottedStatement.DottedStatement = <<Statement> .>
	
//	UnaryMethodHeader.UnaryMethodHeader = UnaryMessageSelector //duplicate
//	BinaryMethodHeader.BinaryMethodHeader = <<BinaryMessageSelector> <BindableIdentifier>>
//	KeywordMethodHeader.KeywordMethodHeader = KeywordMethodHeaderSegment+ //duplicate
	
	KeywordMethodHeaderSegment.KeywordMethodHeaderSegment = <<Keyword> <BindableIdentifier>>
	MethodHeader.UnaryMethodHeader = UnaryMessageSelector 
	MethodHeader.BinaryMethodHeader = <<BinarySelectorChar> <BindableIdentifier>>
	MethodHeader.KeywordMethodHeader = KeywordMethodHeaderSegment+
	MethodDeclaration.MethodDeclaration = <<MethodHeader> <ExecutableCode>>
	
context-free priorities
	


