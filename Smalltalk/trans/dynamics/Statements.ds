module trans/dynamics/Statements

imports
src-gen/ds-signatures/Smalltalk-sig
src-gen/ds-signatures/Base-sig

trans/runtime/values
trans/runtime/store

trans/dynamics/Expressions

signature
  arrows
    FinalStatement --> Statement
    MapStatements(List(Statement)) --> V
    DotRemover(List(DottedStatement)) --> List(Statement)
    StatementExecutor(List(Statement)) --> V
    Statement --> V
    
    StringsFromAssignmentOperations(List(AssignmentOperation)) --> List(String)

rules

	DotRemover([]) --> [].
	DotRemover([DottedStatement(head) | tail]) --> [head | rest]
	where
		DotRemover(tail) --> rest.
			
	StatementExecutor([]) :: S, H --> BoolV(false) :: S, H.
	StatementExecutor([stmt]) :: S, H --> v :: S1, H1
	where
		stmt :: S, H --> v :: S1, H1.
	StatementExecutor([stmt | tail]) :: S, H --> v :: S S2, H H2
	where
		tail != [] : List(Statement);
		stmt :: S, H --> _ :: S1, H1;
		StatementExecutor(tail) :: S {S1, S}, H H1 --> v :: S S2, H H2.
		
	Statement(assignmentOperations, expression) :: S, H --> v :: S S2, H H2
	where
		expression :: S, H --> v :: S1, H1;
//		printV(BoolV(S1["Metaborg"?])) => _;
		case S1["isGlobal"?] of {
			true =>
				bindVarMap(StringsFromAssignmentOperations(assignmentOperations), v) :: S1, H1 --> _ :: S S2, H H2
			otherwise =>
				bindToGlobalMap(StringsFromAssignmentOperations(assignmentOperations), v) :: S1, H1 --> _ :: S S2, H H2
				
		}
		
	StringsFromAssignmentOperations([]) --> [].
	StringsFromAssignmentOperations([AssignmentOperation(BindableIdentifier(id)) | tail]) --> [id | rest]
	where
		StringsFromAssignmentOperations(tail) --> rest.
			
	    
	FinalStatement(stmt) --> stmt
	